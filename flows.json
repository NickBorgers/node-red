[
    {
        "id": "d7a3510d.e93d98",
        "type": "tab",
        "label": "State Tracking",
        "disabled": false,
        "info": ""
    },
    {
        "id": "634c78c80eb9f37e",
        "type": "tab",
        "label": "Configuration",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "499c53680d148fb0",
        "type": "tab",
        "label": "Calendar",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16cd74edb3f2c03d",
        "type": "tab",
        "label": "Hue Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "90f5fe8cb80ae6a7",
        "type": "tab",
        "label": "Music",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "45c21b8b98ae2f01",
        "type": "tab",
        "label": "Vacuum",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "95cf961539320dd3",
        "type": "tab",
        "label": "Sleep Hygiene",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e0490d1fc323107",
        "type": "tab",
        "label": "Log",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a064f420a191bf8",
        "type": "tab",
        "label": "Air Condition",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d2150a703bedcd6",
        "type": "tab",
        "label": "Nagging",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "164999f348401406",
        "type": "tab",
        "label": "TV Monitoring and Manipulation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42abe9d54fa46266",
        "type": "group",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set Volumes",
        "style": {
            "label": true
        },
        "nodes": [
            "d6f678177a40f732",
            "05e5600da5d5942c",
            "be044ab02324dd48",
            "32221838690fa0f1",
            "c8ff24ee16293f06",
            "84f2d908221dfd98",
            "d9903f7751427a48",
            "3abcf1a8523e994c",
            "0b54c55fc3673dc2",
            "22f2d17d21e14f6e",
            "ecc73635aa91485a",
            "06b5888b90359103",
            "e53ccbfadb71b977",
            "fbef539b9c81e0e4",
            "478c37ee53f595cf",
            "9637e0e343385196",
            "2ac64818b1503ff5",
            "18aa5fb312ee3408",
            "b1b296e25475539b",
            "64fb15a8a7187bb5",
            "2c7306185576189a"
        ],
        "x": 654,
        "y": 459,
        "w": 1352,
        "h": 322
    },
    {
        "id": "5b09580d85cd2e6c",
        "type": "group",
        "z": "90f5fe8cb80ae6a7",
        "name": "Stop Playback",
        "style": {
            "label": true
        },
        "nodes": [
            "9af76eda23a1c810",
            "50a24921684156f7",
            "7026db35f0ed25c7",
            "a2a8508703720287",
            "8a79fe3b400b6c66",
            "d57cd408292923c8"
        ],
        "x": 394,
        "y": 899,
        "w": 832,
        "h": 142
    },
    {
        "id": "c48cec27c550ff16",
        "type": "group",
        "z": "90f5fe8cb80ae6a7",
        "name": "Choose Music Playback Mode",
        "style": {
            "label": true
        },
        "nodes": [
            "b14e74697315444e",
            "a488c47d3889b063",
            "e7e0cc2eed3b11d7",
            "a210c969fe06f2f8",
            "51870943b81c7c06",
            "df392259e60d18fd",
            "91e9e187adcc5b04",
            "e461ac8aeac7cb0c",
            "86a9877ef3877d1e",
            "f60ed212caf6af2e",
            "b0a4618460362b3d",
            "64c5ae2169f431b3",
            "0637e774c1000926",
            "c1874bfaab1b2bb3",
            "f4bbf697e8ddc7a7",
            "390fb9a37ca3a441",
            "58b3255f64c30baa"
        ],
        "x": 1314,
        "y": 939,
        "w": 872,
        "h": 402
    },
    {
        "id": "4b656d74411ea89c",
        "type": "group",
        "z": "90f5fe8cb80ae6a7",
        "name": "Pooper's Button",
        "style": {
            "label": true
        },
        "nodes": [
            "2a368b2441b8e268",
            "6ff0fe94ad20f2b0",
            "a16d6614f34882e1",
            "222f41b3e4fc44cd",
            "1400bc1a11781043",
            "bb35db542533564d",
            "da8a13699f936fa8",
            "b5802a0f996c0d73",
            "1f57ca5d204495b8",
            "827e944640382a04",
            "519ba9e8deaad0cb",
            "4123044d0c15479d",
            "1147be5849344bdf",
            "7e52276e5e6c0bf5",
            "54a9e604802ef8f4",
            "8887203cd9731ca8",
            "933a6be2ef3624b6",
            "dc5db439632d9364",
            "9a58aa7993ee54bc"
        ],
        "x": 34,
        "y": 1059,
        "w": 1172,
        "h": 282
    },
    {
        "id": "b2cc5799.eea9d",
        "type": "homekit-bridge",
        "bridgeName": "NodeRed1",
        "pinCode": "169-45-991",
        "port": "",
        "advertiser": "bonjour-hap",
        "allowInsecureRequest": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "customMdnsConfig": false,
        "mdnsMulticast": true,
        "mdnsInterface": "",
        "mdnsPort": "",
        "mdnsIp": "",
        "mdnsTtl": "",
        "mdnsLoopback": true,
        "mdnsReuseAddr": true,
        "allowMessagePassthrough": true
    },
    {
        "id": "e3cb7570.0dbb48",
        "type": "shared-state",
        "name": "isNickHome",
        "lbl": "Nick Home",
        "tags": "State, Presence",
        "historyCount": "1",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "99455ccf.2c8498",
        "type": "shared-state",
        "name": "isCarolineHome",
        "lbl": "Caroline Home",
        "tags": "Presence, State",
        "historyCount": "1",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "1dd96a4a.9d6316",
        "type": "shared-state",
        "name": "isAnyoneHome",
        "lbl": "Anyone Home",
        "tags": "State,Presence",
        "historyCount": "1",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "174c278f.609ec8",
        "type": "shared-state",
        "name": "sunevent",
        "lbl": "Sun Event",
        "tags": "Ambient",
        "historyCount": "12",
        "dataType": "str",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "b69e9a96.7fc43",
        "type": "shared-state",
        "name": "isMasterAsleep",
        "lbl": "Master Asleep",
        "tags": "State",
        "historyCount": "1",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "7cd072335f421810",
        "type": "sonos-config",
        "name": "Living Room",
        "serialnum": "",
        "ipaddress": "sonos-living-room.nickborgers.com"
    },
    {
        "id": "eb483a028b06c90a",
        "type": "sonos-config",
        "name": "Master Bathroom",
        "serialnum": "",
        "ipaddress": "sonos-master-bath.nickborgers.com"
    },
    {
        "id": "80cf2bfc253ff8c2",
        "type": "sonos-config",
        "name": "Master Bedroom",
        "serialnum": "",
        "ipaddress": "sonos-master-bedroom.nickborgers.com"
    },
    {
        "id": "047dcd09c592e040",
        "type": "sonos-config",
        "name": "Nook",
        "serialnum": "",
        "ipaddress": "sonos-nook.nickborgers.com"
    },
    {
        "id": "156ccde543ba4845",
        "type": "shared-state",
        "name": "isGuestAsleep",
        "lbl": "Guest Asleep",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "659fd61043193a4d",
        "type": "shared-state",
        "name": "musicPlaylistNumbers",
        "lbl": "Music Playlist Numbers",
        "tags": "State,Audio",
        "historyCount": "10",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "8c211e55da1f4c7f",
        "type": "shared-state",
        "name": "musicPlaybackType",
        "lbl": "Music Playback Type",
        "tags": "State,Audio",
        "historyCount": "10",
        "dataType": "str",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "e4f5bf03444063a0",
        "type": "shared-state",
        "name": "musicConfig",
        "lbl": "Music Config",
        "tags": "",
        "historyCount": "0",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "b74697c734ad5557",
        "type": "shared-state",
        "name": "currentlyPlayingMusic",
        "lbl": "Currently Playing Music",
        "tags": "",
        "historyCount": "2",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "86b433f8beadaac5",
        "type": "shared-state",
        "name": "hueConfig",
        "lbl": "Hue Config",
        "tags": "",
        "historyCount": "2",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "60c1725bc2519ee0",
        "type": "shared-state",
        "name": "isEveryoneAsleep",
        "lbl": "Everyone Asleep",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "8c8dbb69a0c4c67f",
        "type": "shared-state",
        "name": "isMasterBedroomDoorOpen",
        "lbl": "Is Master Bedroom Door Open?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "3e3052d11dc41010",
        "type": "shared-state",
        "name": "isGuestBedroomDoorOpen",
        "lbl": "Is Guest Bedroom Door Open?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "a5ea3d0a7df352b2",
        "type": "shared-state",
        "name": "isHaveGuests",
        "lbl": "Have Guests?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "3d96ef25996d1dd1",
        "type": "shared-state",
        "name": "reset",
        "lbl": "Reset",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "3ec50562615a9f50",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": false
    },
    {
        "id": "d9abb6b3441e0c2a",
        "type": "shared-state",
        "name": "isTVPlaying",
        "lbl": "Is TV Playing?",
        "tags": "",
        "historyCount": "1",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "e498a23d75394b05",
        "type": "shared-state",
        "name": "lastVacuumingTimestamp",
        "lbl": "Last Vaccuming Timestamp",
        "tags": "",
        "historyCount": "4",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "s"
    },
    {
        "id": "89337ebbba16965d",
        "type": "ttsultimate-config",
        "name": "TTS Service",
        "noderedipaddress": "AUTODISCOVER",
        "noderedport": "1980",
        "purgediratrestart": "leave",
        "ttsservice": "googletranslate",
        "TTSRootFolderPath": ""
    },
    {
        "id": "440f06b05d48d38b",
        "type": "sonos-config",
        "name": "Guest Bedroom",
        "serialnum": "",
        "ipaddress": "sonos-guest-bedroom.nickborgers.com"
    },
    {
        "id": "efc87f0de00a2d36",
        "type": "shared-state",
        "name": "dayPhase",
        "lbl": "Day Phase",
        "tags": "",
        "historyCount": "12",
        "dataType": "str",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "e98cb8b7d7a02f27",
        "type": "log-elk-logger",
        "name": "Elasticsearch",
        "url": "https://10.212.99.6:9200",
        "filename": "log-elk.log",
        "maxsize": "1",
        "maxfiles": "2",
        "logelk": true,
        "logfile": false,
        "logconsole": false,
        "logdebug": false
    },
    {
        "id": "9784d6c488d7a77e",
        "type": "shared-state",
        "name": "isTVon",
        "lbl": "Is TV On?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "f4fbefedb919c3c1",
        "type": "shared-state",
        "name": "schedule",
        "lbl": "Schedule",
        "tags": "",
        "historyCount": "2",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "e1e1553b9b6a27c9",
        "type": "shared-state",
        "name": "isAppleTVPlaying",
        "lbl": "Is Apple TV Playing?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "611761b9dd5c9c4c",
        "type": "shared-state",
        "name": "climateConfig",
        "lbl": "Climate Config",
        "tags": "",
        "historyCount": "1",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "816d3fb762a92b71",
        "type": "shared-state",
        "name": "humidityOfBedroom",
        "lbl": "Humidity of Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "d19054ef0f693509",
        "type": "shared-state",
        "name": "humidityOfLivingRoomWindow",
        "lbl": "Humidity of Living Room Window",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "7e0b34e77bae8edb",
        "type": "shared-state",
        "name": "humidityOfLivingRoomCenter",
        "lbl": "Humidity of Living Room Center",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "51ddddf9304ec19f",
        "type": "shared-state",
        "name": "humidityOfMasterBedroom",
        "lbl": "Humidity of Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "4faab2d5448df995",
        "type": "shared-state",
        "name": "temperatureOfMasterBedroom",
        "lbl": "Temperature of Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "F"
    },
    {
        "id": "098765180c8f29ad",
        "type": "shared-state",
        "name": "temperatureOfLivingRoomCenter",
        "lbl": "Temperature of Living Room Center",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "F"
    },
    {
        "id": "0133e13457d0b692",
        "type": "shared-state",
        "name": "temperatureOfLivingRoomWindow",
        "lbl": "Temperature of Living Room Window",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "F"
    },
    {
        "id": "60f1a7e39e0a4f1c",
        "type": "shared-state",
        "name": "temperatureOfBedroom",
        "lbl": "Temperature of Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "F"
    },
    {
        "id": "1ce72a9fb27d8577",
        "type": "shared-state",
        "name": "isHumidifierOn",
        "lbl": "Is Humdifier On?",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "26ccc92b36b23b99",
        "type": "shared-state",
        "name": "isAnyoneAsleep",
        "lbl": "Anyone Asleep",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "21cd8d0ba24c57ec",
        "type": "shared-state",
        "name": "temperatureOfOutside",
        "lbl": "Temperature Of Outside",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": "F"
    },
    {
        "id": "fdd67c92f6cdbe67",
        "type": "shared-state",
        "name": "humidityOfOutside",
        "lbl": "Humditiy of Outside",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "b7959b8b695cb2e3",
        "type": "shared-state",
        "name": "currentClimate",
        "lbl": "Current Climate",
        "tags": "",
        "historyCount": "2",
        "dataType": "obj",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "08c52a991942a7aa",
        "type": "shared-state",
        "name": "livingRoomACshouldBeOn",
        "lbl": "Living Room AC Should Be On",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "4a83bd328e3c306c",
        "type": "shared-state",
        "name": "guestACshouldBeOn",
        "lbl": "Guest AC Should Be On",
        "tags": "",
        "historyCount": "2",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "095dfa84b601e73c",
        "type": "shared-state",
        "name": "formaldehydeOfMasterBedroom",
        "lbl": "Formaldehyde of Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "f3f728cd1ad260ac",
        "type": "shared-state",
        "name": "formaldehydeOfLivingRoom",
        "lbl": "Formaldehyde of Living Room",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "2cd1bb9b8154af43",
        "type": "shared-state",
        "name": "formaldehydeOfBedroom",
        "lbl": "Formaldehyde of Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "3d210964719a1218",
        "type": "shared-state",
        "name": "pm25OfMasterBedroom",
        "lbl": "PM 2.5 of Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "ab6403409b952999",
        "type": "shared-state",
        "name": "pm25OfLivingRoom",
        "lbl": "PM 2.5 of Living Room",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "3d29dd9baea8c557",
        "type": "shared-state",
        "name": "pm25OfBedroom",
        "lbl": "PM 2.5 of Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "93cb5e076b9a47ab",
        "type": "shared-state",
        "name": "vocOfMasterBedroom",
        "lbl": "VOC of Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "b726d533a34a65b2",
        "type": "shared-state",
        "name": "vocOfLivingRoom",
        "lbl": "VOC of Living Room",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "498e0ff9684c787f",
        "type": "shared-state",
        "name": "vocOfBedroom",
        "lbl": "VOC of Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "6786c1f320a58042",
        "type": "shared-state",
        "name": "desiredHumidityOfMasterBedroom",
        "lbl": "Desired Humidity Master Bedroom",
        "tags": "",
        "historyCount": "2",
        "dataType": "num",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "50613c29969588a5",
        "type": "shared-state",
        "name": "isMasterLightsOff",
        "lbl": "Master Lights Off",
        "tags": "",
        "historyCount": "0",
        "dataType": "bool",
        "boolType": "bool",
        "boolStrTrue": "",
        "boolStrFalse": "",
        "precision": "",
        "numMin": "",
        "numMax": "",
        "unit": ""
    },
    {
        "id": "ee6f66f1.a3f1d",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Nick Home",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 570,
        "y": 140,
        "wires": [
            [
                "b36f048.1426478"
            ],
            []
        ]
    },
    {
        "id": "e23ac102.8d3f",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Caroline Home",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "69314c4a.ac5ad4"
            ],
            []
        ]
    },
    {
        "id": "9460cec7.a8b9e8",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "e3cb7570.0dbb48",
        "name": "Nick Home",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 990,
        "y": 140,
        "wires": []
    },
    {
        "id": "b36f048.1426478",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 140,
        "wires": [
            [
                "9460cec7.a8b9e8"
            ]
        ]
    },
    {
        "id": "69314c4a.ac5ad4",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 200,
        "wires": [
            [
                "a413c4b7.cd166"
            ]
        ]
    },
    {
        "id": "a413c4b7.cd166",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "99455ccf.2c8498",
        "name": "Caroline Home",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "f06d7079.efbcb8",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "99455ccf.2c8498",
        "name": "Caroline Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "8be3694e.cfd798"
            ]
        ]
    },
    {
        "id": "899f1300.9a473",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "e3cb7570.0dbb48",
        "name": "Nick Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 360,
        "wires": [
            [
                "8be3694e.cfd798"
            ]
        ]
    },
    {
        "id": "8be3694e.cfd798",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Are either of us home?",
        "func": "// If either of us are home, someone is home; otherwise neither of us are home\nmsg.payload = global.get(\"state\").isNickHome.value || global.get(\"state\").isCarolineHome.value\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "f1794f1d.551a68"
            ]
        ]
    },
    {
        "id": "f1794f1d.551a68",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "2c7e04dc.e42d34",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Presence Tracking",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "8c3e3030.04e5a",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Presence Triggers from Homekit",
        "info": "",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "638b4007.2cea98",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Manage @home variable",
        "info": "",
        "x": 190,
        "y": 260,
        "wires": []
    },
    {
        "id": "7111de05.4d357",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Sleeper Tracking",
        "info": "",
        "x": 100,
        "y": 440,
        "wires": []
    },
    {
        "id": "f0e93991.7ec61",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Are masters asleep?",
        "info": "",
        "x": 150,
        "y": 480,
        "wires": []
    },
    {
        "id": "d3ddb03d.1dba08",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Masters Asleep",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 560,
        "y": 520,
        "wires": [
            [
                "d235bec0.ec595"
            ],
            []
        ]
    },
    {
        "id": "d235bec0.ec595",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "df524162.b52ae8"
            ]
        ]
    },
    {
        "id": "df524162.b52ae8",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 960,
        "y": 520,
        "wires": []
    },
    {
        "id": "5d4ad8acbf758ea3",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Are Guests Asleep?",
        "info": "",
        "x": 150,
        "y": 600,
        "wires": []
    },
    {
        "id": "74b1e4364e7efcf2",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 960,
        "y": 660,
        "wires": []
    },
    {
        "id": "4d2643c154b00b0a",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "99455ccf.2c8498",
        "name": "Caroline Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "9394ca10e90da60a"
            ]
        ]
    },
    {
        "id": "9394ca10e90da60a",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move value to On",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.On",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 200,
        "wires": [
            [
                "e23ac102.8d3f"
            ]
        ]
    },
    {
        "id": "3b2d7059456eab23",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "e3cb7570.0dbb48",
        "name": "Nick Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "467d34c94ce60834"
            ]
        ]
    },
    {
        "id": "467d34c94ce60834",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move value to On",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.On",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "ee6f66f1.a3f1d"
            ]
        ]
    },
    {
        "id": "3bcef5f89ded8641",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 520,
        "wires": [
            [
                "494477a5e37d3abe"
            ]
        ]
    },
    {
        "id": "494477a5e37d3abe",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move value to On",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.On",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "d3ddb03d.1dba08"
            ]
        ]
    },
    {
        "id": "04cec9c3f2834033",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Master Bedroom Door Open",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "92a787a17e5a68cc"
            ],
            []
        ]
    },
    {
        "id": "394af9bb2a153a77",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Guest Bedroom Door State",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "38b97ca236e8163d"
            ],
            []
        ]
    },
    {
        "id": "b9496f0c3ed2fd10",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Guest Asleep",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 560,
        "y": 660,
        "wires": [
            [
                "07d850c58997c540"
            ],
            []
        ]
    },
    {
        "id": "6dd5f9bf57603ff8",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "60c1725bc2519ee0",
        "name": "Everyone Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 610,
        "y": 800,
        "wires": []
    },
    {
        "id": "bd78e51ac972145a",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Manage Asleep variable",
        "info": "",
        "x": 160,
        "y": 720,
        "wires": []
    },
    {
        "id": "909071c9eb13c82c",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "ca90adbe07cc8c51"
            ]
        ]
    },
    {
        "id": "1d1bf915a3307b0c",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 840,
        "wires": [
            [
                "ca90adbe07cc8c51"
            ]
        ]
    },
    {
        "id": "ca90adbe07cc8c51",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Is everyone asleep?",
        "func": "// If everyone is asleep true otherwise false\nmsg.payload = global.get(\"state\").isMasterAsleep.value && global.get(\"state\").isGuestAsleep.value\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "6dd5f9bf57603ff8"
            ]
        ]
    },
    {
        "id": "3d5eef3f9864a2fa",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Door Tracking",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "92a787a17e5a68cc",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "74c36bd307050540"
            ]
        ]
    },
    {
        "id": "07d850c58997c540",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 660,
        "wires": [
            [
                "74b1e4364e7efcf2"
            ]
        ]
    },
    {
        "id": "05ac5235e80b464e",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move value to On",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.On",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 660,
        "wires": [
            [
                "b9496f0c3ed2fd10"
            ]
        ]
    },
    {
        "id": "21c335cc7ba24c56",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 660,
        "wires": [
            [
                "05ac5235e80b464e"
            ]
        ]
    },
    {
        "id": "74c36bd307050540",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "8c8dbb69a0c4c67f",
        "name": "Is Master Bedroom Door Open?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 710,
        "y": 1080,
        "wires": []
    },
    {
        "id": "38b97ca236e8163d",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1140,
        "wires": [
            [
                "19ef2aa0c73641ce"
            ]
        ]
    },
    {
        "id": "19ef2aa0c73641ce",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "3e3052d11dc41010",
        "name": "Is Guest Bedroom Door Open?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 710,
        "y": 1140,
        "wires": []
    },
    {
        "id": "33941ae1433a1b4e",
        "type": "homekit-service",
        "z": "d7a3510d.e93d98",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Have Guests",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 1610,
        "y": 660,
        "wires": [
            [
                "ef38dc46cc944eaf"
            ],
            []
        ]
    },
    {
        "id": "ad2b0d5d23831af5",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "a5ea3d0a7df352b2",
        "name": "Have Guests?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 2000,
        "y": 660,
        "wires": []
    },
    {
        "id": "ef38dc46cc944eaf",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move on to value",
        "rules": [
            {
                "t": "move",
                "p": "payload.On",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 660,
        "wires": [
            [
                "ad2b0d5d23831af5"
            ]
        ]
    },
    {
        "id": "18b1ebcd18d0855c",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Move value to On",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.On",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 660,
        "wires": [
            [
                "33941ae1433a1b4e"
            ]
        ]
    },
    {
        "id": "8d006bf9909b6636",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "a5ea3d0a7df352b2",
        "name": "Have Guests?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "18b1ebcd18d0855c"
            ]
        ]
    },
    {
        "id": "45fde91860361e14",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Have Guests",
        "info": "",
        "x": 1190,
        "y": 600,
        "wires": []
    },
    {
        "id": "f1aab11be0de5020",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Sleep Detection",
        "info": "",
        "x": 1220,
        "y": 60,
        "wires": []
    },
    {
        "id": "a3b3ee64f48787b9",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Applicability Checks - including door closed",
        "func": "// Check if anyone is home\nif(global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\n// Check if guests currently considered asleep\nif(global.get(\"state\").isGuestAsleep.value) {\n    // They are, nothing to change here\n    return null\n}\n// Do we even have a guest right now?\nif(global.get(\"state\").isHaveGuests.value == false) {\n    // Nope! stop doing this\n    return null\n}\n// Is guest bedroom door closed?\nif(global.get(\"state\").isGuestBedroomDoorOpen.value == false) {\n    // Nope! stop doing this\n    return null\n}\n\n// Didn't disqualify this, it's what we were waiting for\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 100,
        "wires": [
            [
                "823d1203f1396da2"
            ]
        ]
    },
    {
        "id": "6748f17a07e44567",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 2080,
        "y": 100,
        "wires": []
    },
    {
        "id": "c6a29d3ee318916f",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "Wake Detection",
        "info": "",
        "x": 1220,
        "y": 240,
        "wires": []
    },
    {
        "id": "305a7e035256ae31",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "8c8dbb69a0c4c67f",
        "name": "Is Master Bedroom Door Open?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1290,
        "y": 280,
        "wires": [
            [
                "e308dfc1c82afa45"
            ]
        ]
    },
    {
        "id": "206aa2d74e27096a",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1780,
        "y": 280,
        "wires": []
    },
    {
        "id": "c8c2e4225d27f8bb",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "3e3052d11dc41010",
        "name": "Is Guest Bedroom Door Open?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "21aa277aaf073eb4"
            ]
        ]
    },
    {
        "id": "940899f761329f39",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 2000,
        "y": 340,
        "wires": []
    },
    {
        "id": "697bee2d0b291c02",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "a5ea3d0a7df352b2",
        "name": "Have Guests?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 830,
        "y": 820,
        "wires": [
            [
                "0e3907f2e4812720"
            ]
        ]
    },
    {
        "id": "020b3295fb0fa526",
        "type": "comment",
        "z": "d7a3510d.e93d98",
        "name": "If we don't have guests, they're asleep if master is asleep",
        "info": "",
        "x": 970,
        "y": 760,
        "wires": []
    },
    {
        "id": "0e3907f2e4812720",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Do we have guests?",
        "func": "// If we don't have guests, their asleep status should match master\nif (global.get(\"state\").isHaveGuests.value == false) {\n    msg.payload = global.get(\"state\").isMasterAsleep.value\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "d51c49cc4596b1df"
            ]
        ]
    },
    {
        "id": "d51c49cc4596b1df",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 840,
        "wires": []
    },
    {
        "id": "f36ec6cadd9d9633",
        "type": "server-state-changed",
        "z": "d7a3510d.e93d98",
        "name": "Guest Bedroom Lamp Off for 1 minute",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "light.guest_bedroom_lamp",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "1",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1310,
        "y": 100,
        "wires": [
            [
                "a3b3ee64f48787b9"
            ],
            []
        ]
    },
    {
        "id": "823d1203f1396da2",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Set to True",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1910,
        "y": 100,
        "wires": [
            [
                "6748f17a07e44567"
            ]
        ]
    },
    {
        "id": "c2d2df4417b94c03",
        "type": "server-state-changed",
        "z": "d7a3510d.e93d98",
        "name": "Guest Bedroom Lamp On for 1 minute",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "light.guest_bedroom_lamp",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "50",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "af1017d8f0817bec"
            ],
            []
        ]
    },
    {
        "id": "de691be683f352ac",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1940,
        "y": 400,
        "wires": []
    },
    {
        "id": "21aa277aaf073eb4",
        "type": "trigger",
        "z": "d7a3510d.e93d98",
        "name": "If stays true for 20 seconds",
        "op1": "",
        "op2": "false",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "20",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "false",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1560,
        "y": 340,
        "wires": [
            [
                "0d1e38ea9c5ba81d"
            ]
        ]
    },
    {
        "id": "e308dfc1c82afa45",
        "type": "trigger",
        "z": "d7a3510d.e93d98",
        "name": "If stays true for 20 seconds",
        "op1": "",
        "op2": "false",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "20",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "false",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1560,
        "y": 280,
        "wires": [
            [
                "206aa2d74e27096a"
            ]
        ]
    },
    {
        "id": "af1017d8f0817bec",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Set to False",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 400,
        "wires": [
            [
                "bac76e4b8e2c0d4f"
            ]
        ]
    },
    {
        "id": "24dfbaf0a5f808fa",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 830,
        "y": 880,
        "wires": [
            [
                "0e3907f2e4812720"
            ]
        ]
    },
    {
        "id": "e0fd4f80910687d8",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Applicability Checks",
        "func": "// Check if anyone is home\nif(global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\n// Check if masters currently considered asleep\nif(global.get(\"state\").isMasterAsleep.value) {\n    // They are, nothing to change here\n    return null\n}\n// Didn't disqualify this, it's what we were waiting for\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "8d97a2e3e664cd5b"
            ]
        ]
    },
    {
        "id": "bef7d2e0ab4b73d9",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1940,
        "y": 160,
        "wires": []
    },
    {
        "id": "b6021d4b501820ac",
        "type": "server-state-changed",
        "z": "d7a3510d.e93d98",
        "name": "Master Bedroom Lights Off for 1 minute",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "light.master_bedroom",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "1",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1310,
        "y": 160,
        "wires": [
            [
                "e0fd4f80910687d8"
            ],
            []
        ]
    },
    {
        "id": "8d97a2e3e664cd5b",
        "type": "change",
        "z": "d7a3510d.e93d98",
        "name": "Set to True",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 160,
        "wires": [
            [
                "bef7d2e0ab4b73d9"
            ]
        ]
    },
    {
        "id": "05dba22067da7be4",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 830,
        "y": 940,
        "wires": [
            [
                "0e3907f2e4812720"
            ]
        ]
    },
    {
        "id": "4db9c19db8e3a4e7",
        "type": "set-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "26ccc92b36b23b99",
        "name": "Anyone Asleep",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 600,
        "y": 920,
        "wires": []
    },
    {
        "id": "f0278e0c734507b0",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 900,
        "wires": [
            [
                "acdaab9da7d03657"
            ]
        ]
    },
    {
        "id": "76d76502f760e0ad",
        "type": "get-shared-state",
        "z": "d7a3510d.e93d98",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 960,
        "wires": [
            [
                "acdaab9da7d03657"
            ]
        ]
    },
    {
        "id": "acdaab9da7d03657",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Is anyone asleep?",
        "func": "// If anyone is asleep true otherwise false\nmsg.payload = global.get(\"state\").isMasterAsleep.value || global.get(\"state\").isGuestAsleep.value\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            [
                "4db9c19db8e3a4e7"
            ]
        ]
    },
    {
        "id": "bac76e4b8e2c0d4f",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Do we have guests?",
        "func": "// If we don't have guests, do the thing\nif (global.get(\"state\").isHaveGuests.value == true) {\n    return msg;\n}\n// Otherwise don't do anything\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 400,
        "wires": [
            [
                "de691be683f352ac"
            ]
        ]
    },
    {
        "id": "0d1e38ea9c5ba81d",
        "type": "function",
        "z": "d7a3510d.e93d98",
        "name": "Do we have guests?",
        "func": "// If we don't have guests, do the thing\nif (global.get(\"state\").isHaveGuests.value == true) {\n    return msg;\n}\n// Otherwise don't do anything\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 340,
        "wires": [
            [
                "940899f761329f39"
            ]
        ]
    },
    {
        "id": "f98f511841b27c8c",
        "type": "comment",
        "z": "634c78c80eb9f37e",
        "name": "Configurations",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "f991b8b5b5f73fde",
        "type": "exec",
        "z": "634c78c80eb9f37e",
        "command": "cd /data/projects/node-red/ && GIT_SSH_COMMAND='ssh -i ../.sshkeys/__default_NickBorgersOnLowSecurityNode -o IdentitiesOnly=yes' git pull",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Pull latest config",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "a78b91dcc37bee92",
                "8409a48850c82e37",
                "03d49e6e6a6a882d"
            ],
            [],
            []
        ]
    },
    {
        "id": "a78b91dcc37bee92",
        "type": "file in",
        "z": "634c78c80eb9f37e",
        "name": "Read music config file",
        "filename": "/data/projects/node-red/configs/music_config.yaml",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 620,
        "y": 100,
        "wires": [
            [
                "1e97b7b783f670f6"
            ]
        ]
    },
    {
        "id": "1e97b7b783f670f6",
        "type": "yaml",
        "z": "634c78c80eb9f37e",
        "property": "payload",
        "name": "Convert to JSON",
        "x": 870,
        "y": 100,
        "wires": [
            [
                "086ceaf287af18e9"
            ]
        ]
    },
    {
        "id": "6b334e0185781b32",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Get latest configs and activate",
        "props": [],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": true,
        "onceDelay": "90",
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f991b8b5b5f73fde"
            ]
        ]
    },
    {
        "id": "ca1cb228dbf5cd0e",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "e4f5bf03444063a0",
        "name": "Music Config",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1330,
        "y": 100,
        "wires": []
    },
    {
        "id": "8409a48850c82e37",
        "type": "file in",
        "z": "634c78c80eb9f37e",
        "name": "Read Hue config file",
        "filename": "/data/projects/node-red/configs/hue_config.yaml",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 180,
        "y": 220,
        "wires": [
            [
                "08d6acf51e6f0e15"
            ]
        ]
    },
    {
        "id": "08d6acf51e6f0e15",
        "type": "yaml",
        "z": "634c78c80eb9f37e",
        "property": "payload",
        "name": "Convert to JSON",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "3073aace89faf61f"
            ]
        ]
    },
    {
        "id": "3073aace89faf61f",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "86b433f8beadaac5",
        "name": "Hue Config",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "09657a19ee07783e",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "174c278f.609ec8",
        "name": "Sun Event",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "7939e475c30ab6f5",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Winddown",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "winddown",
        "payloadType": "str",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "4f14558e96091d5d",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Dusk",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "dusk",
        "payloadType": "str",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "271909a69a880cd1",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Sunset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sunset",
        "payloadType": "str",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "f826979d9173e4f6",
        "type": "function",
        "z": "634c78c80eb9f37e",
        "name": "Sun State Summarizer",
        "func": "// If sunset\nif (\n    msg.payload.sunevent == \"goldenHour\" ||\n    msg.payload.sunevent == \"sunsetStart\" ||\n    msg.payload.sunevent == \"sunset\"\n  ) {\n    // output true\n    msg.payload = \"sunset\"\n}\n// If dusk\nelse if (\n    msg.payload.sunevent == \"dusk\" ||\n    msg.payload.sunevent == \"nauticalDusk\"\n  ) {\n    // output true\n    msg.payload = \"dusk\"\n}\n// If night\nelse if (\n    msg.payload.sunevent == \"night\" ||\n    msg.payload.sunevent == \"nightEnd\" ||\n    msg.payload.sunevent == \"nauticalDawn\" ||\n    msg.payload.sunevent == \"dawn\" ||\n    msg.payload.sunevent == \"nadir\"\n  ) {\n    // output true\n    msg.payload = \"night\"\n}\n// If morning\nelse if (\n    msg.payload.sunevent == \"sunrise\" ||\n    msg.payload.sunevent == \"sunriseEnd\" ||\n    msg.payload.sunevent == \"goldenHourEnd\"\n  ) {\n    // output true\n    msg.payload = \"morning\"\n}\n// If it's not morning, sunset, dusk, or night; assume it's day\nelse {\n    msg.payload = \"day\"\n}\n\n// Check if this is new, if it is send it\nif (global.get(\"state\").sunevent.value != msg.payload) {\n    return msg\n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "09657a19ee07783e"
            ]
        ]
    },
    {
        "id": "cc1b28fa3ee72e9b",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Day",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "day",
        "payloadType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "60f3d3f665e7ea46",
        "type": "sun events",
        "z": "634c78c80eb9f37e",
        "testmode": false,
        "verbose": "N",
        "topic": "",
        "name": "Sun State Reporter",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "f826979d9173e4f6"
            ],
            []
        ]
    },
    {
        "id": "a230628c753abd65",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Morn",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "morning",
        "payloadType": "str",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "38a0f923f2d7e97e",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Inject Coordinates for Sun Events",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.0",
        "topic": "",
        "payload": "{\"latitude\": 40.76, \"longitude\": -80}",
        "payloadType": "json",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "60f3d3f665e7ea46"
            ]
        ]
    },
    {
        "id": "7001439deafa5a47",
        "type": "comment",
        "z": "634c78c80eb9f37e",
        "name": "Sun Event Tracking to set Scenes",
        "info": "",
        "x": 170,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-question-circle"
    },
    {
        "id": "5c380b83edfd85d6",
        "type": "comment",
        "z": "634c78c80eb9f37e",
        "name": "Reset mechanism available through Homekit",
        "info": "",
        "x": 210,
        "y": 700,
        "wires": []
    },
    {
        "id": "1b9873d4c1d781ca",
        "type": "homekit-service",
        "z": "634c78c80eb9f37e",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Reset",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "45230be763c062ae"
            ],
            []
        ]
    },
    {
        "id": "aa9dca0548480ae1",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "3d96ef25996d1dd1",
        "name": "Reset",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 850,
        "y": 740,
        "wires": []
    },
    {
        "id": "45230be763c062ae",
        "type": "change",
        "z": "634c78c80eb9f37e",
        "name": "Move on to value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "fc6d53171a0a2eef"
            ]
        ]
    },
    {
        "id": "392367f1059edf8f",
        "type": "change",
        "z": "634c78c80eb9f37e",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 800,
        "wires": [
            [
                "1b9873d4c1d781ca"
            ]
        ]
    },
    {
        "id": "05dc4cb847d1d054",
        "type": "delay",
        "z": "634c78c80eb9f37e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 740,
        "wires": [
            [
                "aa9dca0548480ae1"
            ]
        ]
    },
    {
        "id": "3c5040df487f58af",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "392367f1059edf8f"
            ]
        ]
    },
    {
        "id": "a727f6fa4e037102",
        "type": "comment",
        "z": "634c78c80eb9f37e",
        "name": "Home day phase, largely based on sun event",
        "info": "",
        "x": 490,
        "y": 520,
        "wires": [],
        "icon": "font-awesome/fa-question-circle"
    },
    {
        "id": "b681b75836dbf49a",
        "type": "get-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "174c278f.609ec8",
        "name": "Sun Event",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 380,
        "y": 560,
        "wires": [
            [
                "6acc06089b237d56"
            ]
        ]
    },
    {
        "id": "14c93c9256bae5c4",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Check during evening",
        "props": [],
        "repeat": "",
        "crontab": "*/30 4-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "6acc06089b237d56"
            ]
        ]
    },
    {
        "id": "6acc06089b237d56",
        "type": "function",
        "z": "634c78c80eb9f37e",
        "name": "Phase Decider",
        "func": "var sun_event = global.get(\"state\").sunevent.value\n\nmsg = {}\n\n// Get current time\nvar now = new Date()\n// Get the hour\nvar this_hour = now.getHours()\n// Get the minute\nvar this_minute = now.getMinutes()\n\n// Get override times\nvar dusk_time = new Date(global.get(\"state\").schedule.value.dusk)\nvar winddown_time = new Date(global.get(\"state\").schedule.value.winddown)\nvar night_time = new Date(global.get(\"state\").schedule.value.night)\n\n// No override of morning, just go with the sun event\nif (sun_event == \"morning\")\n    // Override if after noon\n    if (this_hour >= 12) {\n        msg.payload = \"day\"\n    } else {\n        msg.payload = \"morning\"\n    }\n// No override of day, just go with the sun event\nif (sun_event == \"day\")\n    msg.payload = \"day\"\n// No override of sunset, just go with the sun event\nif (sun_event == \"sunset\")\n    msg.payload = \"sunset\"\n// If it's dusk we're going to override\nif (sun_event == \"dusk\") {\n    // If it's after the dusk override time go with dusk\n    if (now > dusk_time) {\n        msg.payload = \"dusk\"\n    // Otherwise, freeze us at sunset\n    } else {\n        msg.payload = \"sunset\"\n    }\n}\n// If it's night we're going to override\nif (sun_event == \"night\") {\n    // If it's after night time\n    if (now > night_time) {\n        msg.payload = \"night\"\n    // If it's after winddown time\n    } else if (now > winddown_time) {\n        msg.payload = \"winddown\"\n    // If it's after dusk time\n    } else if (now > dusk_time) {\n        msg.payload = \"dusk\"\n    } else {\n    // If it's not dusk time yet, just stick with sunset\n        msg.payload = \"sunset\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 560,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "cec5fcf493bb58c1",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "fc6d53171a0a2eef",
        "type": "delay",
        "z": "634c78c80eb9f37e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 740,
        "wires": [
            [
                "05dc4cb847d1d054",
                "392367f1059edf8f"
            ]
        ]
    },
    {
        "id": "03d49e6e6a6a882d",
        "type": "file in",
        "z": "634c78c80eb9f37e",
        "name": "Read Schedule config file",
        "filename": "/data/projects/node-red/configs/schedule_config.yaml",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 630,
        "y": 40,
        "wires": [
            [
                "db2ed0e33cc5550d"
            ]
        ]
    },
    {
        "id": "db2ed0e33cc5550d",
        "type": "yaml",
        "z": "634c78c80eb9f37e",
        "property": "payload",
        "name": "Convert to JSON",
        "x": 870,
        "y": 40,
        "wires": [
            [
                "e9dd15aabc896de3"
            ]
        ]
    },
    {
        "id": "91bfd1cbe0c7c95b",
        "type": "set-shared-state",
        "z": "634c78c80eb9f37e",
        "state": "f4fbefedb919c3c1",
        "name": "Schedule",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 40,
        "wires": []
    },
    {
        "id": "e9dd15aabc896de3",
        "type": "function",
        "z": "634c78c80eb9f37e",
        "name": "Parse schedule times",
        "func": "var today = new Date();\nvar day_of_week = today.getDay();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\ntoday = yyyy + '-' + mm + '-' + dd;\n\nvar schedule = {}\n\nfunction get_time_from_string (string_time) {\n    var time\n    try {\n        time = Date.parse(today + 'T' + string_time + \":00\")\n        if (isNaN(time)) {\n            throw new Error('Didnt parse time successfully');\n        }\n    } catch {\n        time = Date.parse(today + 'T0' + string_time + \":00\")\n        if (isNaN(time)) {\n            throw new Error('Didnt parse time successfully');\n        }\n    }\n    console.debug(`Parsed time is ${time} from config value ${string_time}`)\n    return time\n}\n\n// Get the schedule for today's day of the week\nvar today_schedule = msg.payload.schedule[day_of_week]\n\nschedule.begin_wake = get_time_from_string(today_schedule.begin_wake)\nschedule.wake = get_time_from_string(today_schedule.wake)\nschedule.dusk = get_time_from_string(today_schedule.dusk)\nschedule.winddown = get_time_from_string(today_schedule.winddown)\nschedule.stop_screens = get_time_from_string(today_schedule.stop_screens)\nschedule.go_to_bed = get_time_from_string(today_schedule.go_to_bed)\nschedule.night = get_time_from_string(today_schedule.night)\n\nmsg.payload = schedule\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 40,
        "wires": [
            [
                "91bfd1cbe0c7c95b"
            ]
        ]
    },
    {
        "id": "086ceaf287af18e9",
        "type": "function",
        "z": "634c78c80eb9f37e",
        "name": "set all volume_multiplier to float",
        "func": "\nfunction make_volume_multiplier_float(object) {\n  Object.keys(object).forEach(k => {\n    if (typeof object[k] === 'object') {\n      return make_volume_multiplier_float(object[k]);\n    }\n    \n    if (k == \"volume_multiplier\") {\n        object[k] = (object[k]).toFixed(2);\n    }\n  });\n  \n  return object;\n}\n\nmsg.payload = make_volume_multiplier_float(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 100,
        "wires": [
            [
                "ca1cb228dbf5cd0e"
            ]
        ]
    },
    {
        "id": "e7ce8275c4a606f1",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Get Schedule for Day",
        "props": [],
        "repeat": "",
        "crontab": "05 00 * * *",
        "once": false,
        "onceDelay": "900",
        "topic": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "03d49e6e6a6a882d"
            ]
        ]
    },
    {
        "id": "497ec41233eeac9c",
        "type": "inject",
        "z": "634c78c80eb9f37e",
        "name": "Manually set to Night",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "night",
        "payloadType": "str",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "cec5fcf493bb58c1"
            ]
        ]
    },
    {
        "id": "f16bcb4bfea89461",
        "type": "api-current-state",
        "z": "499c53680d148fb0",
        "name": "Get Nick Work Calendar",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "calendar.nborgers_pinterest_com",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "ef40c5c9c328117a"
            ]
        ]
    },
    {
        "id": "eeb048faac509fb7",
        "type": "api-current-state",
        "z": "499c53680d148fb0",
        "name": "Get Nick Personal Calendar",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "calendar.nickborgers_gmail_com",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1300,
        "y": 80,
        "wires": [
            [
                "7ea81c237d1bc6b9"
            ]
        ]
    },
    {
        "id": "e20f60c78f9d70c3",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Parse Start Timestamp",
        "func": "next_event_start = Date.parse(msg.data.attributes.start_time)\n\n\nnew_msg = {}\n\nnew_msg.person = msg.person\nnew_msg.calendar = msg.calendar\nnew_msg.next_event_start = next_event_start\n\nreturn new_msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 340,
        "wires": [
            [
                "ef3a03f27ccc5aac"
            ]
        ]
    },
    {
        "id": "ef3a03f27ccc5aac",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Check if event starts tomorrow morning",
        "func": "const today = new Date()\nconst tomorrow = new Date(today)\ntomorrow.setDate(tomorrow.getDate() + 1)\n\nstartOfTomorrowMorning = new Date(tomorrow);\nstartOfTomorrowMorning.setHours(4);\nstartOfTomorrowMorning.setMinutes(0);\nstartOfTomorrowMorning.setSeconds(0);\n\nendOfTomorrowMorning = new Date(tomorrow);\nendOfTomorrowMorning.setHours(10);\nendOfTomorrowMorning.setMinutes(0);\nendOfTomorrowMorning.setSeconds(0);\n\nif (startOfTomorrowMorning < msg.next_event_start &&\n    endOfTomorrowMorning > msg.next_event_start) {\n        return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "8c780ce574114c79"
            ]
        ]
    },
    {
        "id": "78b97767ec7322f1",
        "type": "api-current-state",
        "z": "499c53680d148fb0",
        "name": "Get Caroline Personal Calendar",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "calendar.cpersonius216_gmail_com",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1310,
        "y": 200,
        "wires": [
            [
                "54dc994524561093"
            ]
        ]
    },
    {
        "id": "27cc38fa63122801",
        "type": "inject",
        "z": "499c53680d148fb0",
        "name": "Check during evening",
        "props": [],
        "repeat": "",
        "crontab": "*/15 20-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "e05c1b0b11607600"
            ]
        ]
    },
    {
        "id": "4692feeb7bad273d",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Nick",
        "rules": [
            {
                "t": "set",
                "p": "person",
                "pt": "msg",
                "to": "Nick",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "d307702ed23e98f3"
            ]
        ]
    },
    {
        "id": "2ae4546130f6a88d",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Caroline",
        "rules": [
            {
                "t": "set",
                "p": "person",
                "pt": "msg",
                "to": "Caroline",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "704229286b8d3587"
            ]
        ]
    },
    {
        "id": "788db9362b2ed4ab",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Work",
        "rules": [
            {
                "t": "set",
                "p": "calendar",
                "pt": "msg",
                "to": "Work",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "f16bcb4bfea89461"
            ]
        ]
    },
    {
        "id": "90885fafa2c4dd63",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Personal",
        "rules": [
            {
                "t": "set",
                "p": "calendar",
                "pt": "msg",
                "to": "Personal",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "eeb048faac509fb7"
            ]
        ]
    },
    {
        "id": "6dc231aa8e595417",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Personal",
        "rules": [
            {
                "t": "set",
                "p": "calendar",
                "pt": "msg",
                "to": "Personal",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "78b97767ec7322f1"
            ]
        ]
    },
    {
        "id": "a3678204f8f05362",
        "type": "ttsultimate",
        "z": "499c53680d148fb0",
        "name": "",
        "voice": "en-GB",
        "ssml": false,
        "sonosipaddress": "10.212.100.226",
        "sonosvolume": "20",
        "sonoshailing": "Hailing_Hailing.mp3",
        "config": "89337ebbba16965d",
        "property": "payload",
        "propertyType": {},
        "rules": [],
        "playertype": "sonos",
        "speakingrate": "1",
        "speakingpitch": "0",
        "unmuteIfMuted": true,
        "x": 870,
        "y": 400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8c780ce574114c79",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Generate Notification Message",
        "func": "event_start = new Date(parseInt(msg.next_event_start))\n\nhour = event_start.getHours();\nminute = event_start.getMinutes();\n\nnotification_message = msg.person + \", you have an event on your \" + msg.calendar + \" calendar which starts at \"\n\nif (minute == 0) {\n    notification_message = notification_message + hour + \" am\"\n} else {\n    notification_message = notification_message + hour + \" \" + minute + \" am\"\n}\n\nnotification_message = notification_message + \" tomorrow morning.\"\n\nmsg.payload = notification_message\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 400,
        "wires": [
            [
                "691e49e8493599d4"
            ]
        ]
    },
    {
        "id": "0ed88bf8056f6919",
        "type": "link call",
        "z": "499c53680d148fb0",
        "name": "Reset Music",
        "links": [
            "b1f2b5145a191585"
        ],
        "timeout": "30",
        "x": 1050,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "f8f16db190a9bbf1",
        "type": "catch",
        "z": "499c53680d148fb0",
        "name": "Catch TTS Error",
        "scope": [
            "a3678204f8f05362"
        ],
        "uncaught": false,
        "x": 880,
        "y": 460,
        "wires": [
            [
                "0ed88bf8056f6919"
            ]
        ]
    },
    {
        "id": "e05c1b0b11607600",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Only Proceed if we are awake",
        "func": "if (global.get(\"state\").isMasterAsleep.value == false) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "4692feeb7bad273d",
                "2ae4546130f6a88d"
            ]
        ]
    },
    {
        "id": "d307702ed23e98f3",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Only Proceed if Nick is Home",
        "func": "if (global.get(\"state\").isNickHome.value) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "788db9362b2ed4ab",
                "90885fafa2c4dd63"
            ]
        ]
    },
    {
        "id": "704229286b8d3587",
        "type": "function",
        "z": "499c53680d148fb0",
        "name": "Only Proceed if Caroline is Home",
        "func": "if (global.get(\"state\").isCarolineHome.value) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 220,
        "wires": [
            [
                "6dc231aa8e595417",
                "06f4e5c7d9a46571"
            ]
        ]
    },
    {
        "id": "06f4e5c7d9a46571",
        "type": "change",
        "z": "499c53680d148fb0",
        "name": "Set Attr For Work",
        "rules": [
            {
                "t": "set",
                "p": "calendar",
                "pt": "msg",
                "to": "Work",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "21abaeffc63334c7"
            ]
        ]
    },
    {
        "id": "21abaeffc63334c7",
        "type": "api-current-state",
        "z": "499c53680d148fb0",
        "name": "Get Caroline Work Calendar",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "calendar.carolinep_remitly_com",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "7801e88d316cb498"
            ]
        ]
    },
    {
        "id": "7ea81c237d1bc6b9",
        "type": "delay",
        "z": "499c53680d148fb0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "19",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 80,
        "wires": [
            [
                "e20f60c78f9d70c3"
            ]
        ]
    },
    {
        "id": "ef40c5c9c328117a",
        "type": "delay",
        "z": "499c53680d148fb0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "19",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "e20f60c78f9d70c3"
            ]
        ]
    },
    {
        "id": "54dc994524561093",
        "type": "delay",
        "z": "499c53680d148fb0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "19",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 200,
        "wires": [
            [
                "e20f60c78f9d70c3"
            ]
        ]
    },
    {
        "id": "7801e88d316cb498",
        "type": "delay",
        "z": "499c53680d148fb0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "19",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 260,
        "wires": [
            [
                "e20f60c78f9d70c3"
            ]
        ]
    },
    {
        "id": "691e49e8493599d4",
        "type": "delay",
        "z": "499c53680d148fb0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "a3678204f8f05362"
            ]
        ]
    },
    {
        "id": "5eafd94846b1351d",
        "type": "comment",
        "z": "499c53680d148fb0",
        "name": "Ugly check trigger",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "28ae008b535bbdc3",
        "type": "comment",
        "z": "499c53680d148fb0",
        "name": "Only notify once per day",
        "info": "",
        "x": 1570,
        "y": 40,
        "wires": []
    },
    {
        "id": "5908acc6f289a226",
        "type": "comment",
        "z": "499c53680d148fb0",
        "name": "Read calendar",
        "info": "",
        "x": 1260,
        "y": 40,
        "wires": []
    },
    {
        "id": "9212dea7c3727082",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Sun Event-based scene settings for all rooms",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "109af65d.29420a",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "d2a0c7cb.1bd518"
            ]
        ]
    },
    {
        "id": "d2a0c7cb.1bd518",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Check if anyone home and not everyone asleep",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\nif (global.get(\"state\").isEveryoneAsleep.value == true) {\n    return null\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "1ee8dd5329aad550"
            ]
        ]
    },
    {
        "id": "2b5771db.5cc26e",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "d2a0c7cb.1bd518"
            ]
        ]
    },
    {
        "id": "95a066e2.436e7",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "3e279bdd0682936e"
            ]
        ]
    },
    {
        "id": "6563d5d5.1f5c5c",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Turn everything off if needed",
        "info": "",
        "x": 140,
        "y": 540,
        "wires": []
    },
    {
        "id": "19b38e68.bd9cea",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 580,
        "wires": [
            [
                "a14179adc764d592"
            ]
        ]
    },
    {
        "id": "1b30c854f439ed7f",
        "type": "inject",
        "z": "16cd74edb3f2c03d",
        "name": "Manually set lights",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "d2a0c7cb.1bd518",
                "792164089d62de52"
            ]
        ]
    },
    {
        "id": "cd060db8315b8a7e",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "3e279bdd0682936e"
            ]
        ]
    },
    {
        "id": "4f29df791c0e22eb",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "60c1725bc2519ee0",
        "name": "Everyone Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "3e279bdd0682936e"
            ]
        ]
    },
    {
        "id": "889c7da1d6d64229",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "3d96ef25996d1dd1",
        "name": "Reset",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "3e279bdd0682936e"
            ]
        ]
    },
    {
        "id": "7935909ef8708c2f",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Activate Dynamic Scene",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "hue",
        "service": "activate_scene",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{entity}}"
        ],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1770,
        "y": 280,
        "wires": [
            [
                "d13c1bcbd1548e82"
            ]
        ]
    },
    {
        "id": "c81034bf2843ebc6",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Pick which rooms to apply scenes to",
        "func": "const toSnakeCase = str =>\n    str &&\n    str\n        .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n        .map(x => x.toLowerCase())\n        .join('_');\n\nvar hueConfig = global.get(\"state\").hueConfig.value\n\nvar dayPhase = global.get(\"state\").dayPhase.value\n\nhueConfig.rooms.forEach(function(thisRoomToActivate) {\n    // Does this participant even have this attribute?\n    if (\"off_if_true\" in thisRoomToActivate) {\n        // If so, is it true?\n        if (global.get(\"state\")[thisRoomToActivate.off_if_true].value) {\n            return null\n        }\n    }\n    \n    msg.payload = {}\n    var scene_name = thisRoomToActivate.hue_group + \" \" + dayPhase \n    msg.entity = \"scene.\" + String(toSnakeCase(scene_name))\n    msg.payload.dynamic = true\n    msg.payload.transition = 240\n    msg.delay = msg.payload.transition*1000\n    msg.config = thisRoomToActivate\n    // The nook doesn't do well with dynamics b/c of its lights\n    if (thisRoomToActivate.hue_group == \"Nook\") {\n        msg.payload.dynamic = false\n    }\n    node.send(msg)\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 280,
        "wires": [
            [
                "1e0d8022cef2ed62"
            ]
        ]
    },
    {
        "id": "1e0d8022cef2ed62",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1570,
        "y": 280,
        "wires": [
            [
                "7935909ef8708c2f"
            ]
        ]
    },
    {
        "id": "792164089d62de52",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Pick rooms whose variables are now true",
        "func": "var hueConfig = global.get(\"state\").hueConfig.value\n\nvar dayPhase = global.get(\"state\").dayPhase.value\n\nhueConfig.rooms.forEach(function(thisRoomToTurnOff) {\n    // Does this participant even have this attribute?\n    if (\"off_if_true\" in thisRoomToTurnOff) {\n        // Is the variable change triggering us the special \"reset\" case, or is it the variable this room cares about?\n        if ((msg.topic == \"reset\" || msg.topic == thisRoomToTurnOff.off_if_true) \n        // Is the variable this room cares about true?\n        && global.get(\"state\")[thisRoomToTurnOff.off_if_true].value) {\n            msg.payload = {}\n            msg.payload.area_id = thisRoomToTurnOff.hass_area_id\n            node.send(msg)\n        }\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "7ed258ec2fd76e0a"
            ]
        ]
    },
    {
        "id": "9d9ff9bfa287e582",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Turn on lights path",
        "info": "",
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "b718416c12cdb464",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off lights path",
        "info": "",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "3e279bdd0682936e",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Aggregate Triggers",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 360,
        "wires": [
            [
                "d2a0c7cb.1bd518",
                "792164089d62de52"
            ]
        ]
    },
    {
        "id": "d4e0576749b87d16",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off lights in room",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "x": 980,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6e7492c93999c36c",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Pick every room",
        "func": "var hueConfig = global.get(\"state\").hueConfig.value\n\nhueConfig.rooms.forEach(function(thisRoomToTurnOff) {\n    // Pick every single room\n    msg.payload = {}\n    msg.payload.area_id = thisRoomToTurnOff.hass_area_id\n    node.send(msg)\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 520,
        "wires": [
            [
                "7ed258ec2fd76e0a"
            ]
        ]
    },
    {
        "id": "7ed258ec2fd76e0a",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "d4e0576749b87d16",
                "38e66f87fa924f52"
            ]
        ]
    },
    {
        "id": "de7d4b5c6bd29efc",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Bright",
        "info": "",
        "x": 70,
        "y": 640,
        "wires": []
    },
    {
        "id": "3a18c616bed81b01",
        "type": "homekit-service",
        "z": "16cd74edb3f2c03d",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Bright",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "515bdc9718d62b40"
            ],
            []
        ]
    },
    {
        "id": "515bdc9718d62b40",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Move on to value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "117283bed69961e5"
            ]
        ]
    },
    {
        "id": "be1b0aef8b46b403",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 740,
        "wires": [
            [
                "3a18c616bed81b01"
            ]
        ]
    },
    {
        "id": "1ef69f3a154c54fd",
        "type": "inject",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "be1b0aef8b46b403"
            ]
        ]
    },
    {
        "id": "b9f2817921074955",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Apply Bright to all rooms",
        "func": "hueConfig = global.get(\"state\").hueConfig.value\n\ndayPhase = global.get(\"state\").dayPhase.value\n\nhueConfig.rooms.forEach(function(thisRoomToActivate) {\n    // Does this participant even have this attribute?\n    if (\"off_if_true\" in thisRoomToActivate) {\n        // If so, is it true?\n        if (global.get(\"state\")[thisRoomToActivate.off_if_true].value) {\n            return null\n        }\n    }\n    \n    msg.payload = {}\n    msg.payload.group_name = thisRoomToActivate.hue_group\n    msg.payload.scene_name = \"Bright\"\n    msg.payload.dynamic = true\n    // The nook doesn't do well with dynamics b/c of its lights\n    if (thisRoomToActivate.hue_group == \"Nook\") {\n        msg.payload.dynamic = false\n    }\n    node.send(msg)\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 680,
        "wires": [
            [
                "0793eb5edefcf142"
            ]
        ]
    },
    {
        "id": "fcfad92e25c72d66",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 680,
        "wires": [
            [
                "b9f2817921074955"
            ]
        ]
    },
    {
        "id": "0793eb5edefcf142",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Activate Bright Scene",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "hue",
        "service": "hue_activate_scene",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1120,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "117283bed69961e5",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 680,
        "wires": [
            [
                "be1b0aef8b46b403",
                "fcfad92e25c72d66"
            ]
        ]
    },
    {
        "id": "1ee8dd5329aad550",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "Only allow 1 per minute",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "cb5e9ad34e76e9ce"
            ]
        ]
    },
    {
        "id": "54078ecde99da032",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off TV",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "turn_off",
        "areaId": [
            "living_room"
        ],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 530,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a14179adc764d592",
        "type": "switch",
        "z": "16cd74edb3f2c03d",
        "name": "If noone home",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 580,
        "wires": [
            [
                "6e7492c93999c36c",
                "54078ecde99da032"
            ]
        ]
    },
    {
        "id": "b47a5d8324f29a71",
        "type": "link out",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "mode": "link",
        "links": [
            "9d79d6cd3f994b75"
        ],
        "x": 1465,
        "y": 400,
        "wires": []
    },
    {
        "id": "d13c1bcbd1548e82",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "Check if we should bump brightness",
        "func": "// Does this participant even have this attribute?\nif (\"increase_brightness_if_true\" in msg.config) {\n    // If so, is it true?\n    if (global.get(\"state\")[msg.config.increase_brightness_if_true].value) {\n        var area_id = msg.config.hass_area_id\n        msg.payload = {}\n        msg.payload.area_id = area_id\n        msg.payload.brightness_step_pct = 15\n        return msg\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 340,
        "wires": [
            [
                "d7eb8a42c01b70f0"
            ]
        ]
    },
    {
        "id": "f0aaaedb87db2709",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Turn up Brightness",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1790,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "885dc189294d5842",
        "type": "inject",
        "z": "16cd74edb3f2c03d",
        "name": "Force light reset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "cb5e9ad34e76e9ce"
            ]
        ]
    },
    {
        "id": "d7eb8a42c01b70f0",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "delayv",
        "timeout": "500",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1620,
        "y": 340,
        "wires": [
            [
                "f0aaaedb87db2709"
            ]
        ]
    },
    {
        "id": "b7c9d24de738f885",
        "type": "get-shared-state",
        "z": "16cd74edb3f2c03d",
        "state": "a5ea3d0a7df352b2",
        "name": "Have Guests?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "3e279bdd0682936e"
            ]
        ]
    },
    {
        "id": "38e66f87fa924f52",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off Christmas Tree",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 990,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "744205d987216a52",
        "type": "homekit-service",
        "z": "16cd74edb3f2c03d",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Christmas Tree",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 120,
        "y": 840,
        "wires": [
            [
                "24e9a86f6ef237d7"
            ],
            []
        ]
    },
    {
        "id": "a7f6b62ed3480f3d",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 900,
        "wires": [
            [
                "744205d987216a52"
            ]
        ]
    },
    {
        "id": "24e9a86f6ef237d7",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Move on to value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 840,
        "wires": [
            [
                "3a58ce5706edc9df"
            ]
        ]
    },
    {
        "id": "c48609019e991911",
        "type": "inject",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 900,
        "wires": [
            [
                "a7f6b62ed3480f3d"
            ]
        ]
    },
    {
        "id": "3a58ce5706edc9df",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 840,
        "wires": [
            [
                "a7f6b62ed3480f3d",
                "87c36e5948fb7493"
            ]
        ]
    },
    {
        "id": "87c36e5948fb7493",
        "type": "delay",
        "z": "16cd74edb3f2c03d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 840,
        "wires": [
            [
                "66a7133c326a29d9"
            ]
        ]
    },
    {
        "id": "6a16930c8658d389",
        "type": "comment",
        "z": "16cd74edb3f2c03d",
        "name": "Christmas Tree",
        "info": "",
        "x": 100,
        "y": 800,
        "wires": []
    },
    {
        "id": "66a7133c326a29d9",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Turn On Christmas Tree",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree"
        ],
        "data": "{\"brightness_pct\":100,\"transition\": 240}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "7753f747909284c6",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If sunset",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"sunset\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 480,
        "wires": [
            [
                "80b69f2b1e048b8d"
            ]
        ]
    },
    {
        "id": "b1cfafb2bd2bd19f",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If dusk",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"dusk\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 520,
        "wires": [
            [
                "529e7ec5c577e8a3",
                "b47a5d8324f29a71"
            ]
        ]
    },
    {
        "id": "b1b49ef0c57b3e81",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If winddown",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"winddown\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "205c08e95dbca68c"
            ]
        ]
    },
    {
        "id": "80b69f2b1e048b8d",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Christmas Tree Full Brightness",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree"
        ],
        "data": "{\"brightness_pct\":100,\"transition\": 240}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1530,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "529e7ec5c577e8a3",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Christmas Tree Moderate Brightness",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree"
        ],
        "data": "{\"brightness_pct\":60,\"transition\": 240}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1550,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "205c08e95dbca68c",
        "type": "api-call-service",
        "z": "16cd74edb3f2c03d",
        "name": "Christmas Tree Low Brightness",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree"
        ],
        "data": "{\"brightness_pct\":40,\"transition\": 240}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1530,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "db2d8c82785df7b4",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If morning",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"morning\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 400,
        "wires": [
            [
                "b47a5d8324f29a71"
            ]
        ]
    },
    {
        "id": "bab582a44090fd16",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If day",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"day\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "471118ec3815948a",
        "type": "function",
        "z": "16cd74edb3f2c03d",
        "name": "If night",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"night\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 600,
        "wires": [
            [
                "205c08e95dbca68c"
            ]
        ]
    },
    {
        "id": "cb5e9ad34e76e9ce",
        "type": "change",
        "z": "16cd74edb3f2c03d",
        "name": "Mixer",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "c81034bf2843ebc6",
                "db2d8c82785df7b4",
                "bab582a44090fd16",
                "7753f747909284c6",
                "b1cfafb2bd2bd19f",
                "b1b49ef0c57b3e81",
                "471118ec3815948a"
            ]
        ]
    },
    {
        "id": "f744b5b41bd0fbe0",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "message",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Put provided URI into queue",
        "x": 1440,
        "y": 200,
        "wires": [
            [
                "4688688d8b43d7e8"
            ]
        ]
    },
    {
        "id": "1e65c8e512e5da5c",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "group.play.queue",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Start Playing",
        "x": 2010,
        "y": 200,
        "wires": [
            [
                "440226e0e537344b"
            ]
        ]
    },
    {
        "id": "440226e0e537344b",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "group.set.queuemode",
        "state": "REPEAT_ALL",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Set to Repeat this playlist forever",
        "x": 1620,
        "y": 260,
        "wires": [
            [
                "cb549f365f52843c"
            ]
        ]
    },
    {
        "id": "ed9bddb805628e39",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "group.clear.queue",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Clear existing Queue",
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "b96e92eb32250a11"
            ]
        ]
    },
    {
        "id": "2af7ad02c544ef24",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "Build master music message",
        "func": "console.debug(\"Preparing for music playback\")\n// Music type is set by variable\nvar musicType = global.get(\"state\").musicPlaybackType.value\n// We use an object variable or tracking which # playlist in the type\nvar musicPlaylistNumbers = {}\nif (typeof global.get(\"state\").musicPlaylistNumbers != \"undefined\") {\n    musicPlaylistNumbers = global.get(\"state\").musicPlaylistNumbers.value\n}\n// If this type has a number already, use it; otherwise create it as 0\nvar thisPlaylistNumber\nif (musicType in musicPlaylistNumbers) {\n    thisPlaylistNumber = musicPlaylistNumbers[musicType]\n} else {\n    thisPlaylistNumber = musicPlaylistNumbers[musicType] = 0\n}\n\n// Get full musicConfig\nvar musicConfig = global.get(\"state\").musicConfig.value.music\n// Get the overall object for this type of music\nvar musicTypeObject = musicConfig[musicType]\n// Get the specifics for this playback option of the music type\nvar musicToPlay = {}\nif (thisPlaylistNumber in musicTypeObject[\"playback_options\"]) {\n    musicToPlay = musicTypeObject[\"playback_options\"][thisPlaylistNumber]\n} else {\n    musicToPlay.volume_multiplier = 1\n}\n// Generate a comma-separate list of players to group for playback based on the config\nvar players = \"\"\n// Generate an array list of players for preparation\nvar playerArray = []\n// Blanket copy the music type's definition of participants onto the individual playback option\nmusicToPlay[\"participants\"] = musicTypeObject[\"participants\"]\nconsole.debug(\"Collected all configuration needed for music playback\")\n// Iterate over all participants in this music playback type\nmusicTypeObject[\"participants\"].forEach(function(participant, index) {\n    console.debug(\"Processing \" + participant.player_name)\n    // Take the name of this player participants and add it to the list of all participants\n    players = players + participant.player_name + \",\"\n    // Add it to the array\n    playerArray.push(participant.player_name)\n    // The specific playback option's volume varies based on a multiplier\n    musicToPlay[\"participants\"].forEach(function(playbackParticipant) {\n        if (playbackParticipant.player_name == participant.player_name) {\n            // Determine appropriate volume for this participant using:\n            //  * default from playback type for this speaker\n            //  * multiplier for this playback option\n            playbackParticipant.volume = Math.round(participant.base_volume * musicToPlay.volume_multiplier)\n            playbackParticipant.default_volume = playbackParticipant.volume\n            console.debug(\"Calculated volume of \" + playbackParticipant.volume + \" for \" + participant.player_name)\n        }\n    });\n    // Mute all players being engaged in this group\n    var muteMsg = {}\n    muteMsg.payload = \"on\"\n    muteMsg.playerName = participant.player_name\n    node.send([null, null, muteMsg, null])\n});\n// Strip last comma\nplayers = players.replace(/,$/, ''); \n\n// Get lead player\nvar leadPlayerName = musicToPlay.participants[0].player_name\n\n// Playback is initiated by building the group and providing instructions to lead player\nvar playMsg = {}\nplayMsg.payload = players\nplayMsg.playerArray = playerArray\nplayMsg.playerName = leadPlayerName\nplayMsg.command = musicToPlay.command \nplayMsg.uri = musicToPlay.uri\nconsole.debug(\"To play type \" + musicType + \" music, will play \" + musicToPlay.command + \" with uri \" + musicToPlay.uri)\n\nvar currentlyPlayingMusic = {}\ncurrentlyPlayingMusic.payload = musicToPlay\ncurrentlyPlayingMusic.payload.type = musicType\ncurrentlyPlayingMusic.payload.leadPlayer = leadPlayerName\n\n// Need a new playlist numbers object\nvar incrementMsg = {}\n// If this playlist number for the given type of music would exceed the number of options, roll it over\nif ((musicPlaylistNumbers[musicType] + 1) >= musicConfig[musicType][\"playback_options\"].length) {\n    musicPlaylistNumbers[musicType] = 0\n} else {\n    // Otherwise increment it\n    musicPlaylistNumbers[musicType] = musicPlaylistNumbers[musicType] + 1\n}\nincrementMsg.payload = musicPlaylistNumbers\n\n// Build message to ensure full stoppage on engaged players\nvar stopMsg = {}\nstopMsg.payload = playerArray\n\n// playMsg kicks of buidling playback group and starting playback\n// currentlyPlayingMusic just publishes/saves what we're going to play\n// The null is the individual mute messages we already sent\n// incrementMsg kicks the playlist number variable\n// stopMsg is the list of players for stopping any exisitng playback\nreturn [ playMsg, currentlyPlayingMusic, null, incrementMsg, stopMsg ] ",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "15448e0eedc040e8"
            ],
            [
                "3399e992f8964d12"
            ],
            [
                "74c73e32cb11e451"
            ],
            [
                "e42d1eba960ea3cd"
            ],
            [
                "1d6d18eb04f69a2b"
            ]
        ]
    },
    {
        "id": "e42d1eba960ea3cd",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "659fd61043193a4d",
        "name": "Music Playlist Numbers",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "1d4b9e7c11ac066c",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Music Playback",
        "info": "",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "fa5a15fef36b436f",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "047dcd09c592e040",
        "command": "household.create.group",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Create playback group",
        "x": 1120,
        "y": 80,
        "wires": [
            [
                "99b18bfe0abb713d"
            ]
        ]
    },
    {
        "id": "d6f678177a40f732",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Create participant-specific message",
        "func": "// By default, move to set volume and appropriately unmute all players in current playback\nvar targets = global.get(\"state\").currentlyPlayingMusic.value.participants\nvar type = global.get(\"state\").currentlyPlayingMusic.value.type\n// If we were given a single specific target though, downscope\nif (\"target\" in msg) {\n    console.debug(\"Setting volume and mute state for specific speaker: \" + msg.target)\n    var specificTarget = []\n    targets.forEach(function(participant) {\n        if (participant.player_name == msg.target) {\n            specificTarget = [participant]\n        }\n    });\n    if (specificTarget.length == 0) {\n        node.warn(\"Asked to reset volume and mute state of unrecognized player: \" + msg.target)\n        return null\n    }\n    targets = specificTarget\n} else {\n    console.debug(\"Setting volume and mute state for all speakers\")\n}\n\n// Iterate over our targets and kick off setting their volume and mute state\ntargets.forEach(function(target) {\n    var participantSpecificMsg = {}\n    participantSpecificMsg.playerName = target.player_name\n    participantSpecificMsg.payload = target.volume\n    if (\"leave_muted_if\" in target) {\n        participantSpecificMsg.leave_muted_if = target.leave_muted_if\n    }\n    participantSpecificMsg.starting_type = type\n    node.send(participantSpecificMsg);\n});\n\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 640,
        "wires": [
            [
                "84f2d908221dfd98",
                "d9903f7751427a48"
            ]
        ]
    },
    {
        "id": "b14e74697315444e",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 2060,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a488c47d3889b063",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Day Music Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "day",
        "payloadType": "str",
        "x": 1730,
        "y": 1060,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "e7e0cc2eed3b11d7",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Morning Music Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "morning",
        "payloadType": "str",
        "x": 1750,
        "y": 1020,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "c576374c5d7f7d68",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "Manually reactivate music",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "551ddc8702a7c82e"
            ]
        ]
    },
    {
        "id": "551ddc8702a7c82e",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "Check if non-null mode",
        "func": "var musicPlaybackType = global.get(\"state\").musicPlaybackType.value\n\n// If it's something other than none/nothing\nif (musicPlaybackType) {\n    console.debug(\"Sending message to begin playback of \" + musicPlaybackType)\n    return [ msg, null ]\n}\nvar blankMsg = {\"payload\": null}\n// Otherwise just stop current playback\nconsole.debug(\"Sending blank playback message\")\nreturn [null, blankMsg ]",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "c1a50671a5ed2076"
            ],
            [
                "1d6d18eb04f69a2b",
                "42b63b9f501f348d"
            ]
        ]
    },
    {
        "id": "8b2c1a1d7bbcb289",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Apply command and URI",
        "rules": [
            {
                "t": "move",
                "p": "uri",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "command",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 134,
        "wires": [
            [
                "f744b5b41bd0fbe0"
            ]
        ]
    },
    {
        "id": "f3ead1f64943f894",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "595573f8f9ee970d"
            ]
        ]
    },
    {
        "id": "a210c969fe06f2f8",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Music Mode Management",
        "info": "",
        "x": 1450,
        "y": 980,
        "wires": []
    },
    {
        "id": "51870943b81c7c06",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1400,
        "y": 1040,
        "wires": [
            [
                "e461ac8aeac7cb0c"
            ]
        ]
    },
    {
        "id": "df392259e60d18fd",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "No Music Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1710,
        "y": 1140,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "91e9e187adcc5b04",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1410,
        "y": 1100,
        "wires": [
            [
                "c1874bfaab1b2bb3"
            ]
        ]
    },
    {
        "id": "e461ac8aeac7cb0c",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Set music type based on conditions",
        "func": "// Only play music if someone is home\nif (global.get(\"state\").isAnyoneHome.value == false) {\n    msg.payload = \"\"\n    return msg\n}\n// If anyone is asleep, set to sleep\nif (global.get(\"state\").isAnyoneAsleep.value) {\n    msg.payload = \"sleep\"\n    return msg\n}\n\nvar dayPhase = global.get(\"state\").dayPhase.value\n\n// If it's day time\nif (dayPhase == \"day\" || dayPhase == \"morning\") {\n    // If what changed was the last person waking up, kick off some music\n    if (msg.topic == \"isAnyoneAsleep\" && msg.payload == false) {\n        // Sunday override\n        var date = new Date();\n        var daynum = date.getDay();\n        // If day is not Sunday\n        if (daynum != 0) {\n            msg.payload = \"morning\"\n            return msg\n        }\n    }\n    // If noone is asleep then day starts\n    if (global.get(\"state\").isAnyoneAsleep.value == false) {\n        msg.payload = \"day\"\n        return msg\n    }\n// If it's sunset\n} else if (dayPhase == \"sunset\"\n        || dayPhase == \"dusk\") {\n    msg.payload = \"evening\"\n    return msg\n} else if (dayPhase == \"winddown\"\n        || dayPhase == \"night\") {\n    // Override for when sleep sounds get started a little early\n    if (global.get(\"state\").musicPlaybackType.value == \"sleep\") {\n        return null\n    }\n    msg.payload = \"winddown\"\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1100,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "199beb67d0b28dd3",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 90,
        "y": 920,
        "wires": [
            [
                "ac0919edce9342cb"
            ]
        ]
    },
    {
        "id": "ca90831aed9ec6d3",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Shut it all down when we leave",
        "info": "",
        "x": 150,
        "y": 840,
        "wires": []
    },
    {
        "id": "9af76eda23a1c810",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "name": "Build or parse list of players",
        "func": "var playerNames = new Set()\n\ntry {\n    msg.payload.forEach(function(thisPlayerName) {\n        playerNames.add(thisPlayerName)\n    });\n} catch (error) {\n    var musicConfig = global.get(\"state\").musicConfig.value.music\n\n    Object.values(musicConfig).forEach(function (musicType) {\n        musicType.participants.forEach(function (participant) {\n            playerNames.add(participant.player_name)\n        });\n    });\n}\n\nplayerNames.forEach(function(playerName) {\n    msg = {}\n    msg.playerName = playerName\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 940,
        "wires": [
            [
                "50a24921684156f7"
            ]
        ]
    },
    {
        "id": "8be0e32634ffd63f",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "Shutdown all music",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 880,
        "wires": [
            [
                "84aa12b53063f146"
            ]
        ]
    },
    {
        "id": "50a24921684156f7",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "confignode": "047dcd09c592e040",
        "command": "player.become.standalone",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Break group for player",
        "x": 920,
        "y": 940,
        "wires": [
            [
                "d57cd408292923c8"
            ]
        ]
    },
    {
        "id": "7026db35f0ed25c7",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "confignode": "047dcd09c592e040",
        "command": "group.clear.queue",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Clear any queue for player",
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "a2a8508703720287"
            ]
        ]
    },
    {
        "id": "a2a8508703720287",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "confignode": "047dcd09c592e040",
        "command": "group.stop",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Stop any playback for player",
        "x": 940,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "2a368b2441b8e268",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Button in guest bathroom for pooper to bump volume up",
        "info": "",
        "x": 270,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6ff0fe94ad20f2b0",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Bump pooper volumes",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "a16d6614f34882e1"
            ]
        ]
    },
    {
        "id": "a16d6614f34882e1",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "confignode": "047dcd09c592e040",
        "command": "group.get.members",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get participants",
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "1400bc1a11781043"
            ]
        ]
    },
    {
        "id": "222f41b3e4fc44cd",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "confignode": "7cd072335f421810",
        "command": "player.get.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get Volume",
        "x": 1030,
        "y": 1100,
        "wires": [
            [
                "bb35db542533564d"
            ]
        ]
    },
    {
        "id": "1400bc1a11781043",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Iterate over players",
        "func": "msg.payload.forEach(function(participant) {\n    msg.payload = null\n    msg.playerName = participant.playerName\n    if ([ \"Living Room\", \"Guest Bathroom\", \"Guest Bedroom\" ].indexOf(msg.playerName) > -1) {\n        node.send(msg)\n        console.debug(`Kicking ${msg.playerName} for pooper's button`)\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1100,
        "wires": [
            [
                "222f41b3e4fc44cd"
            ]
        ]
    },
    {
        "id": "bb35db542533564d",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Create Adjusted Volume",
        "func": "msg.originalVolume = msg.payload\n\nvar new_based_on_percentage = Math.floor(msg.payload * 1.3)\nvar new_based_on_minimum = msg.payload + 7\n\nmsg.payload = Math.max(new_based_on_percentage, new_based_on_minimum)\n\nconsole.debug(`${msg.playerName} volume was ${msg.originalVolume}, bumping to ${msg.payload}`)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "da8a13699f936fa8"
            ]
        ]
    },
    {
        "id": "da8a13699f936fa8",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "confignode": "7cd072335f421810",
        "command": "player.set.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Set Higher Volume",
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "827e944640382a04"
            ]
        ]
    },
    {
        "id": "b5802a0f996c0d73",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "confignode": "7cd072335f421810",
        "command": "player.set.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Resume volume",
        "x": 960,
        "y": 1240,
        "wires": [
            [
                "9a58aa7993ee54bc"
            ]
        ]
    },
    {
        "id": "1f57ca5d204495b8",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Bring back original volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "originalVolume",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "b5802a0f996c0d73"
            ]
        ]
    },
    {
        "id": "827e944640382a04",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1110,
        "y": 1180,
        "wires": [
            [
                "1f57ca5d204495b8"
            ]
        ]
    },
    {
        "id": "cb549f365f52843c",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "group.set.queuemode",
        "state": "SHUFFLE",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Set this playlist to shuffle",
        "x": 1890,
        "y": 260,
        "wires": [
            [
                "f4fa70e926f0951f"
            ]
        ]
    },
    {
        "id": "86a9877ef3877d1e",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Pick Appropriate Music",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1460,
        "y": 1280,
        "wires": [
            [
                "e461ac8aeac7cb0c"
            ]
        ]
    },
    {
        "id": "f60ed212caf6af2e",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Evening Music Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "evening",
        "payloadType": "str",
        "x": 1750,
        "y": 1180,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "f03b35b35db09355",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "047dcd09c592e040",
        "command": "player.set.mutestate",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Mute Participant",
        "x": 1200,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f4fa70e926f0951f",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "eb483a028b06c90a",
        "command": "group.next.track",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Skip first track",
        "x": 2100,
        "y": 260,
        "wires": [
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "05e5600da5d5942c",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Apply unmute criteria",
        "func": "console.debug(\"Processing mute criteria for \" + msg.playerName)\n// Does this participant even have this attribute?\nif (\"leave_muted_if\" in msg) {\n    // Iterate over all criteria\n    for (const criteria of msg.leave_muted_if) {\n        // Does the value of the variable match the criteria?\n        if (global.get(\"state\")[criteria.variable].value == criteria.value) {\n            // Mute this player\n            msg.payload = \"on\"\n            return msg\n        }\n    }\n}\n// Unmute this player\nmsg.payload = \"off\"\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 740,
        "wires": [
            [
                "c8ff24ee16293f06"
            ]
        ]
    },
    {
        "id": "80c2cd4fe9e57682",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Message here specifies playerName coordinator, but includes all as participants",
        "info": "",
        "x": 1300,
        "y": 40,
        "wires": []
    },
    {
        "id": "be044ab02324dd48",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Set volumes and mute states",
        "info": "",
        "x": 800,
        "y": 600,
        "wires": []
    },
    {
        "id": "32221838690fa0f1",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "confignode": "047dcd09c592e040",
        "command": "player.set.mutestate",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Unmute appropriate participants",
        "x": 1730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "4688688d8b43d7e8",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 200,
        "wires": [
            [
                "395f431b6a94ecc2"
            ]
        ]
    },
    {
        "id": "aff6f6e708f7023b",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Mute/unmute if criteria changes",
        "info": "",
        "x": 170,
        "y": 460,
        "wires": []
    },
    {
        "id": "b8aac178ae27949f",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 520,
        "wires": [
            [
                "a78f9276bce4a401"
            ]
        ]
    },
    {
        "id": "5ccaf2971c6c55ad",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 580,
        "wires": [
            [
                "a78f9276bce4a401"
            ]
        ]
    },
    {
        "id": "d5f59723898a7298",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set blank value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 860,
        "wires": [
            [
                "f9f43e5b15149e43"
            ]
        ]
    },
    {
        "id": "f9f43e5b15149e43",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 860,
        "y": 860,
        "wires": []
    },
    {
        "id": "519ba9e8deaad0cb",
        "type": "homekit-service",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Pooper",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "1147be5849344bdf"
            ],
            []
        ]
    },
    {
        "id": "4123044d0c15479d",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1300,
        "wires": [
            [
                "519ba9e8deaad0cb"
            ]
        ]
    },
    {
        "id": "1147be5849344bdf",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "If Turned On",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 1220,
        "wires": [
            [
                "a16d6614f34882e1",
                "4123044d0c15479d"
            ]
        ]
    },
    {
        "id": "3399e992f8964d12",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "b74697c734ad5557",
        "name": "Currently Playing Music",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 990,
        "y": 240,
        "wires": []
    },
    {
        "id": "c8ff24ee16293f06",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1510,
        "y": 740,
        "wires": [
            [
                "32221838690fa0f1"
            ]
        ]
    },
    {
        "id": "a78f9276bce4a401",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "Determine if this variable is relevant",
        "func": "console.debug(\"Processing change in variable \" + msg.topic + \" for relavence to music playback\")\n\n// Get the participants in the currently playing music, which are our active players\nvar activePlayers = global.get(\"state\").currentlyPlayingMusic.value.participants\n\n// For each of the active players, check if the changed variable is the condition\nactivePlayers.forEach(function(participant) {\n    // Players may not even have a criteria\n    if (\"leave_muted_if\" in participant) {\n        // Iterate over all criteria\n        participant.leave_muted_if.forEach(function(criteria) {\n            // This criteria is the one that changed\n            if (msg.topic == criteria.variable) {\n                console.debug(msg.topic + \" is relavent to \" + participant.player_name)\n                var newMsg = {}\n                newMsg.target = participant.player_name\n                node.send(newMsg)\n            }\n        });\n    }\n});\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "dc86ccb8622b2b62"
            ]
        ]
    },
    {
        "id": "b0a4618460362b3d",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Winddown Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "winddown",
        "payloadType": "str",
        "x": 1730,
        "y": 1220,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "7e52276e5e6c0bf5",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Turn on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1300,
        "wires": [
            [
                "519ba9e8deaad0cb"
            ]
        ]
    },
    {
        "id": "a657b9091453b569",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "Force volume reset",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 430,
        "y": 460,
        "wires": [
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "64c5ae2169f431b3",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Sleep Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sleep",
        "payloadType": "str",
        "x": 1720,
        "y": 1260,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "e8cd723e91c84e9f",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "3d96ef25996d1dd1",
        "name": "Reset",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 90,
        "y": 220,
        "wires": [
            [
                "551ddc8702a7c82e"
            ]
        ]
    },
    {
        "id": "0637e774c1000926",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "state": "26ccc92b36b23b99",
        "name": "Anyone Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1420,
        "y": 1220,
        "wires": [
            [
                "e461ac8aeac7cb0c"
            ]
        ]
    },
    {
        "id": "99a3622344a19b92",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "d9abb6b3441e0c2a",
        "name": "Is TV Playing?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 640,
        "wires": [
            [
                "a78f9276bce4a401"
            ]
        ]
    },
    {
        "id": "5a298bb857e474e1",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "Wipe playlist numbers",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 940,
        "y": 380,
        "wires": [
            [
                "e42d1eba960ea3cd"
            ]
        ]
    },
    {
        "id": "54a9e604802ef8f4",
        "type": "server-events",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Sense if there's a Hue event",
        "server": "3ec50562615a9f50",
        "version": 3,
        "exposeAsEntityConfig": "",
        "eventType": "hue_event",
        "eventData": "",
        "waitForRunning": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "event_type": "",
        "x": 200,
        "y": 1180,
        "wires": [
            [
                "8887203cd9731ca8"
            ]
        ]
    },
    {
        "id": "8887203cd9731ca8",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "Check if pooper's button",
        "func": "// If this was anything BUT the pooper's button\nif(msg.payload.event.id != \"poopers_button_button\") {\n    // Do nothing\n    return null\n}\n// If this was anything BUT a short release\nif(msg.payload.event.type != \"short_release\") {\n    // Do nothing\n    return null\n}\n\nconsole.debug(\"Pooper's button was pressed\")\n\n// Ok, it was a short release of the pooper's button\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1240,
        "wires": [
            [
                "933a6be2ef3624b6"
            ]
        ]
    },
    {
        "id": "74c73e32cb11e451",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 300,
        "wires": [
            [
                "f20a5ab810409235"
            ]
        ]
    },
    {
        "id": "b96e92eb32250a11",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1310,
        "y": 140,
        "wires": [
            [
                "4f197c88344aa51e"
            ]
        ]
    },
    {
        "id": "395f431b6a94ecc2",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1840,
        "y": 200,
        "wires": [
            [
                "1e65c8e512e5da5c"
            ]
        ]
    },
    {
        "id": "84f2d908221dfd98",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 740,
        "wires": [
            [
                "05e5600da5d5942c"
            ]
        ]
    },
    {
        "id": "d9903f7751427a48",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "ecc73635aa91485a"
            ]
        ]
    },
    {
        "id": "c1a50671a5ed2076",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "2af7ad02c544ef24"
            ]
        ]
    },
    {
        "id": "c1874bfaab1b2bb3",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 1160,
        "wires": [
            [
                "e461ac8aeac7cb0c"
            ]
        ]
    },
    {
        "id": "35d2e1491d3ecc24",
        "type": "catch",
        "z": "90f5fe8cb80ae6a7",
        "name": "Catch Sonos Error",
        "scope": [
            "f744b5b41bd0fbe0",
            "fa5a15fef36b436f",
            "1e65c8e512e5da5c"
        ],
        "uncaught": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "bf3a7ded5059b145"
            ]
        ]
    },
    {
        "id": "bf3a7ded5059b145",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 320,
        "wires": [
            [
                "a09328f28a47fb2f"
            ]
        ]
    },
    {
        "id": "3b5eb7152ac47fa3",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "3e3052d11dc41010",
        "name": "Is Guest Bedroom Door Open?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 170,
        "y": 700,
        "wires": [
            [
                "a78f9276bce4a401"
            ]
        ]
    },
    {
        "id": "a09328f28a47fb2f",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 320,
        "wires": [
            [
                "551ddc8702a7c82e"
            ]
        ]
    },
    {
        "id": "b1f2b5145a191585",
        "type": "link in",
        "z": "90f5fe8cb80ae6a7",
        "name": "Reset Music",
        "links": [],
        "x": 205,
        "y": 220,
        "wires": [
            [
                "551ddc8702a7c82e"
            ]
        ]
    },
    {
        "id": "3abcf1a8523e994c",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Set Volumes",
        "info": "",
        "x": 1150,
        "y": 500,
        "wires": []
    },
    {
        "id": "0b54c55fc3673dc2",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Set mute states (after volumes and with blind sleep)",
        "info": "",
        "x": 1270,
        "y": 700,
        "wires": []
    },
    {
        "id": "34bd02b0a6ce0a3f",
        "type": "link in",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set Volumes and Mute",
        "links": [
            "9cf90b7812a7ab73",
            "4a3bdf6826669285",
            "dc5db439632d9364",
            "84ed0aab23753b90"
        ],
        "x": 505,
        "y": 400,
        "wires": [
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "22f2d17d21e14f6e",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.get.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get a volume",
        "x": 1530,
        "y": 540,
        "wires": [
            [
                "06b5888b90359103"
            ]
        ]
    },
    {
        "id": "ecc73635aa91485a",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Save desired volume",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "desired_volume",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "22f2d17d21e14f6e"
            ]
        ]
    },
    {
        "id": "06b5888b90359103",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Branch out volume turn ups",
        "func": "var current_volume = msg.payload\n\nvar desired_volume = msg.desired_volume\n\nif (current_volume < desired_volume) {\n    current_volume++\n    msg.payload = current_volume\n    msg.last_volume_set = current_volume\n    node.send([msg, msg])\n} else {\n    msg.payload = desired_volume\n    node.send([msg, null])\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "fbef539b9c81e0e4"
            ],
            [
                "478c37ee53f595cf"
            ]
        ]
    },
    {
        "id": "e53ccbfadb71b977",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.set.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Set a volume",
        "x": 1910,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "fbef539b9c81e0e4",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1750,
        "y": 640,
        "wires": [
            [
                "e53ccbfadb71b977"
            ]
        ]
    },
    {
        "id": "478c37ee53f595cf",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Delay",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "64fb15a8a7187bb5"
            ]
        ]
    },
    {
        "id": "9637e0e343385196",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Repeat turn ups until done",
        "func": "console.debug(\"Processing fade in for \" + msg.playerName)\n\n// What is the volume currently?\nvar current_volume = msg.payload\n\n// Check for someone fighting the system\nif (current_volume < msg.last_volume_set) {\n    console.debug(\"Found someone fighting fade in for \" + msg.playerName)\n    // If the volume is less than what was last set, assume someone\n    // is fighting the system trying to turn down the volume\n    console.debug(\"Terminating fade in for \" + msg.playerName)\n    return null\n}\n\n// Check for a change in music playback type\nvar starting_type = msg.starting_type\nvar current_type = global.get(\"state\").currentlyPlayingMusic.value.type\nif (starting_type != current_type) {\n    console.debug(\"Found that music playback type has changed for \" + msg.playerName)\n    // We have done weird things with volume by applying settings after the type has changed\n    console.debug(\"Terminating fade in for \" + msg.playerName)\n    return null\n}\n\n// What is the volume supposed to be?\nvar allParticipantSpeakers = global.get(\"state\").currentlyPlayingMusic.value.participants\nallParticipantSpeakers.forEach(function (aParticipantSpeaker) {\n    // If this is the config for the speaker we're setting volume for\n    if (aParticipantSpeaker.player_name == msg.playerName) {\n        // Read desired volume from this config, NOT what we were originally told\n        var desired_volume = aParticipantSpeaker.volume\n    }\n});\n\nif (typeof desired_volume === 'undefined') {\n    var desired_volume = msg.desired_volume\n}\n\n// If we haven't gotten up to the desired volume\nif (current_volume < desired_volume) {\n    console.debug(\"Still need to turn up \" + msg.playerName)\n    console.debug(\"Current volume \" + current_volume)\n    console.debug(\"Desired volume \" + desired_volume)\n    // The new set volume is current + 1\n    var new_volume = current_volume + 1\n    console.debug(\"Adjusted volume setting for \" + msg.playerName)\n    // This new volume is the payload\n    msg.payload = new_volume\n    // Separately save off the value we're setting\n    msg.last_volume_set = new_volume\n    // Set the delay for the next turn up to be greater if volume is lower\n    msg.delay = (100 - current_volume) * 250\n    console.debug(\"Sending turn up messages for \" + msg.playerName)\n    // Send the change\n    return msg\n}\nconsole.debug(\"Completed fade in for \" + msg.playerName)\nconsole.debug(\"Current volume \" + current_volume)\n// We're done, everything is as it should be",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 640,
        "wires": [
            [
                "478c37ee53f595cf",
                "fbef539b9c81e0e4"
            ]
        ]
    },
    {
        "id": "2ac64818b1503ff5",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "If volume decrease, it's immediate",
        "info": "",
        "x": 1820,
        "y": 600,
        "wires": []
    },
    {
        "id": "18aa5fb312ee3408",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Break out volume increase and do slowly",
        "info": "",
        "x": 1700,
        "y": 500,
        "wires": []
    },
    {
        "id": "f6379d3ea7c03bbf",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Allow calling from other flows",
        "info": "",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "b1b296e25475539b",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "If volume increase, do in one unit steps",
        "info": "",
        "x": 1230,
        "y": 600,
        "wires": []
    },
    {
        "id": "53d4e4efdc24769d",
        "type": "get-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 1420,
        "y": 880,
        "wires": [
            [
                "1f2c2279830e6f01"
            ]
        ]
    },
    {
        "id": "547ddda64a1b6148",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set all speaker volumes to 0 when sleep starts",
        "info": "",
        "x": 1490,
        "y": 840,
        "wires": []
    },
    {
        "id": "1f2c2279830e6f01",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "if sleep",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sleep",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1600,
        "y": 880,
        "wires": [
            [
                "04d8ead9f50cc124"
            ]
        ]
    },
    {
        "id": "04d8ead9f50cc124",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "For all speakers generate volume 0 msg",
        "func": "var playerNames = new Set()\n\nvar musicConfig = global.get(\"state\").musicConfig.value.music\n\nObject.values(musicConfig).forEach(function(musicType) {\n    musicType.participants.forEach(function (participant) {\n        playerNames.add(participant.player_name)\n    });\n});\n\nplayerNames.forEach(function(playerName) {\n    msg = {}\n    msg.playerName = playerName\n    msg.payload = 0\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 880,
        "wires": [
            [
                "dfd5eadfaffa3982"
            ]
        ]
    },
    {
        "id": "dfd5eadfaffa3982",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.set.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Set a volume",
        "x": 2090,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "f20a5ab810409235",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "Limit",
        "pauseType": "rate",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "f03b35b35db09355"
            ]
        ]
    },
    {
        "id": "ac0919edce9342cb",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "If noone home",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 920,
        "wires": [
            [
                "84aa12b53063f146"
            ]
        ]
    },
    {
        "id": "8a79fe3b400b6c66",
        "type": "link in",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "name": "Stop all Music Playback",
        "links": [
            "37f338bf292f6dfb",
            "1d6d18eb04f69a2b"
        ],
        "x": 435,
        "y": 940,
        "wires": [
            [
                "9af76eda23a1c810"
            ]
        ]
    },
    {
        "id": "1d6d18eb04f69a2b",
        "type": "link out",
        "z": "90f5fe8cb80ae6a7",
        "name": "Stop all Music Playback",
        "mode": "link",
        "links": [
            "8a79fe3b400b6c66"
        ],
        "x": 685,
        "y": 200,
        "wires": []
    },
    {
        "id": "15448e0eedc040e8",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 80,
        "wires": [
            [
                "fa5a15fef36b436f"
            ]
        ]
    },
    {
        "id": "84aa12b53063f146",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Aggregate",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 860,
        "wires": [
            [
                "9af76eda23a1c810",
                "d5f59723898a7298"
            ]
        ]
    },
    {
        "id": "64fb15a8a7187bb5",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.get.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get a volume",
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "9637e0e343385196"
            ]
        ]
    },
    {
        "id": "f4bbf697e8ddc7a7",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Airplay Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "airplay",
        "payloadType": "str",
        "x": 1780,
        "y": 980,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "4f197c88344aa51e",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "If no URI, skip play set",
        "property": "uri",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1500,
        "y": 140,
        "wires": [
            [
                "8b2c1a1d7bbcb289"
            ],
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "b8624a9798508f86",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Prepare for Airplay",
        "info": "",
        "x": 150,
        "y": 1400,
        "wires": []
    },
    {
        "id": "053acfa1369f7077",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 1500,
        "wires": [
            [
                "0c06b3ab431b4a5d"
            ]
        ]
    },
    {
        "id": "d1dd67e097547adc",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1440,
        "wires": [
            [
                "40ad98fa1f9d1c37"
            ]
        ]
    },
    {
        "id": "faaa22a4567a2a1a",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "053acfa1369f7077"
            ]
        ]
    },
    {
        "id": "0c06b3ab431b4a5d",
        "type": "homekit-service",
        "z": "90f5fe8cb80ae6a7",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Airplay",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "d1dd67e097547adc"
            ],
            []
        ]
    },
    {
        "id": "40ad98fa1f9d1c37",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 1440,
        "wires": [
            [
                "053acfa1369f7077",
                "f9e2c99c1e6e529e"
            ]
        ]
    },
    {
        "id": "f9e2c99c1e6e529e",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set airplay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "airplay",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1440,
        "wires": [
            [
                "5d25445d1b3dde4d"
            ]
        ]
    },
    {
        "id": "5d25445d1b3dde4d",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 640,
        "y": 1500,
        "wires": []
    },
    {
        "id": "2056bb683597d209",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Vigorously Stop Playback",
        "info": "",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "390fb9a37ca3a441",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Sex Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sex",
        "payloadType": "str",
        "x": 1710,
        "y": 1300,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "d57cd408292923c8",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "5b09580d85cd2e6c",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 940,
        "wires": [
            [
                "7026db35f0ed25c7"
            ]
        ]
    },
    {
        "id": "07905cc9996bbca8",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Prepare for Sex",
        "info": "",
        "x": 920,
        "y": 1400,
        "wires": []
    },
    {
        "id": "1003f4e6c70997ae",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 1500,
        "wires": [
            [
                "7e09683799289a28"
            ]
        ]
    },
    {
        "id": "c112e061dd6e2c9d",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1150,
        "y": 1440,
        "wires": [
            [
                "a68983d224d72b74"
            ]
        ]
    },
    {
        "id": "87b02cd2a388c1ce",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 1500,
        "wires": [
            [
                "1003f4e6c70997ae"
            ]
        ]
    },
    {
        "id": "7e09683799289a28",
        "type": "homekit-service",
        "z": "90f5fe8cb80ae6a7",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Sex",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 910,
        "y": 1440,
        "wires": [
            [
                "c112e061dd6e2c9d"
            ],
            []
        ]
    },
    {
        "id": "a68983d224d72b74",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1290,
        "y": 1440,
        "wires": [
            [
                "1003f4e6c70997ae",
                "67d8e1498288db75"
            ]
        ]
    },
    {
        "id": "67d8e1498288db75",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Set sex",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sex",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1440,
        "wires": [
            [
                "49cfb3c78c5b995b",
                "69e15e68770a8d9a"
            ]
        ]
    },
    {
        "id": "49cfb3c78c5b995b",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1470,
        "y": 1500,
        "wires": []
    },
    {
        "id": "c3775f614d985c03",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.set.volume",
        "state": "25",
        "stateType": "num",
        "avoidCheckPlayerAvailability": false,
        "name": "Set bedroom volume",
        "x": 1620,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "69e15e68770a8d9a",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 1560,
        "wires": [
            [
                "c3775f614d985c03"
            ]
        ]
    },
    {
        "id": "58b3255f64c30baa",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "g": "c48cec27c550ff16",
        "name": "Make Birds Playback",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "wakeup",
        "payloadType": "str",
        "x": 1920,
        "y": 1300,
        "wires": [
            [
                "b14e74697315444e"
            ]
        ]
    },
    {
        "id": "933a6be2ef3624b6",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "7e52276e5e6c0bf5"
            ]
        ]
    },
    {
        "id": "301b282a622e2935",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Restore Volumes",
        "info": "",
        "x": 140,
        "y": 1560,
        "wires": []
    },
    {
        "id": "115769f7632575d2",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 1660,
        "wires": [
            [
                "6181daaf361adf67"
            ]
        ]
    },
    {
        "id": "f9061fcc35da0b37",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1600,
        "wires": [
            [
                "8f8b48fd31690863"
            ]
        ]
    },
    {
        "id": "eb6436f411b5ea19",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1660,
        "wires": [
            [
                "115769f7632575d2"
            ]
        ]
    },
    {
        "id": "6181daaf361adf67",
        "type": "homekit-service",
        "z": "90f5fe8cb80ae6a7",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Volume Restore",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 140,
        "y": 1600,
        "wires": [
            [
                "f9061fcc35da0b37"
            ],
            []
        ]
    },
    {
        "id": "8f8b48fd31690863",
        "type": "switch",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 1600,
        "wires": [
            [
                "115769f7632575d2",
                "84ed0aab23753b90"
            ]
        ]
    },
    {
        "id": "84ed0aab23753b90",
        "type": "link out",
        "z": "90f5fe8cb80ae6a7",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "34bd02b0a6ce0a3f"
        ],
        "x": 595,
        "y": 1600,
        "wires": []
    },
    {
        "id": "302ac9fe9d41e10f",
        "type": "inject",
        "z": "90f5fe8cb80ae6a7",
        "name": "Turn off pooper's button",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"On\": false}",
        "payloadType": "json",
        "x": 270,
        "y": 1360,
        "wires": [
            [
                "519ba9e8deaad0cb"
            ]
        ]
    },
    {
        "id": "dc86ccb8622b2b62",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "595573f8f9ee970d",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "Prevent re-activation of already active music",
        "func": "var musicPlaybackType = msg.payload\n\nvar currentlyPlayingMusic = global.get(\"state\").currentlyPlayingMusic.value\nif (currentlyPlayingMusic) {\n    if (currentlyPlayingMusic.type == musicPlaybackType) {\n        console.debug(\"Double activation of already-playing musicType, ignore\")\n        return null\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "551ddc8702a7c82e"
            ]
        ]
    },
    {
        "id": "1e239bb03f0d826f",
        "type": "sonos-universal",
        "z": "90f5fe8cb80ae6a7",
        "confignode": "047dcd09c592e040",
        "command": "household.get.groups",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get playback groups",
        "x": 1660,
        "y": 80,
        "wires": [
            [
                "6c1e2890d2cb3628"
            ]
        ]
    },
    {
        "id": "99b18bfe0abb713d",
        "type": "change",
        "z": "90f5fe8cb80ae6a7",
        "name": "Save participants",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "participants",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 80,
        "wires": [
            [
                "91c0b03a98cc3a07"
            ]
        ]
    },
    {
        "id": "6c1e2890d2cb3628",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "name": "Compare desired with active groups",
        "func": "console.debug(\"Comparing active groups with desired groups\")\n\nvar desiredParticipants = msg.participants\n\nmsg.payload.forEach(function (activeGroup) {\n    if (activeGroup[0].playerName == msg.playerName) {\n        console.debug(\"We found the group with the leader we were looking for\")\n\n        var matches = 0\n        // for each player we expect to be in the group\n        msg.playerArray.forEach(function (expectedPlayerName) {\n            // look at each player actually in the group\n            activeGroup.forEach(function (thisActivePlayer) {\n                // and see if the expected player name is a match\n                if (thisActivePlayer.playerName == expectedPlayerName) {\n                    // if it's a match with this playername we know it's present in the group\n                    matches++\n                }\n\n            });\n        });\n\n        console.debug(\"Found \" + matches + \" matches\")\n        console.debug(\"Expected \" + msg.playerArray.length + \" players in active group\")\n\n        if (matches != msg.playerArray.length) {\n            console.debug(\"One or more players in the group wasn't a match for what was expected\")\n            msg.payload = desiredParticipants\n            console.debug(msg)\n            node.send([msg, null])\n        } else {\n            console.debug(\"All Players are present in created playback group\")\n            node.send([null, msg])\n        }\n    }\n});",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 80,
        "wires": [
            [
                "fa5a15fef36b436f"
            ],
            [
                "ed9bddb805628e39"
            ]
        ]
    },
    {
        "id": "91c0b03a98cc3a07",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1490,
        "y": 80,
        "wires": [
            [
                "1e239bb03f0d826f"
            ]
        ]
    },
    {
        "id": "2c7306185576189a",
        "type": "function",
        "z": "90f5fe8cb80ae6a7",
        "g": "42abe9d54fa46266",
        "name": "Reset volumes to defaults",
        "func": "console.debug(\"Reset all speaker volumes to default configured values\")\n\n// By default, move to set volume and appropriately unmute all players in current playback\nvar config = global.get(\"state\").currentlyPlayingMusic.value\nvar participants = config.participants\n\n// Iterate over our targets and kick off setting their volume and mute state\nparticipants.forEach(function(participant) {\n\n    if (participant.volume != participant.default_volume) {\n        console.debug(participant.name + \" volume was \" + participant.volume + \" not the default of \" + participant.default_volume + \" so configuring it back to that default.\")\n        participant.volume = participant.default_volume\n    }\n    \n});\n\nconfig.participants = participants\n\nreturn config",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 720,
        "wires": [
            [
                "d6f678177a40f732"
            ]
        ]
    },
    {
        "id": "5374a17b2d4ccaee",
        "type": "link in",
        "z": "90f5fe8cb80ae6a7",
        "name": "Reset volumes to defaults",
        "links": [
            "b1c715f0b5055288"
        ],
        "x": 615,
        "y": 720,
        "wires": [
            [
                "2c7306185576189a"
            ]
        ]
    },
    {
        "id": "613afda7a20728cf",
        "type": "comment",
        "z": "90f5fe8cb80ae6a7",
        "name": "Allow calling from other flows",
        "info": "",
        "x": 460,
        "y": 720,
        "wires": []
    },
    {
        "id": "dc5db439632d9364",
        "type": "link out",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "34bd02b0a6ce0a3f"
        ],
        "x": 1135,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9a58aa7993ee54bc",
        "type": "delay",
        "z": "90f5fe8cb80ae6a7",
        "g": "4b656d74411ea89c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 1300,
        "wires": [
            [
                "dc5db439632d9364"
            ]
        ]
    },
    {
        "id": "42b63b9f501f348d",
        "type": "set-shared-state",
        "z": "90f5fe8cb80ae6a7",
        "state": "b74697c734ad5557",
        "name": "Currently Playing Music",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "66648323963fb7f3",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "808803961811f725",
                "64757357a5ad8757"
            ]
        ]
    },
    {
        "id": "808803961811f725",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "If noone home",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return msg\n}\n// Somebody is home, do nothing\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "943c5232d392ac86"
            ]
        ]
    },
    {
        "id": "a153aee19cd0e1dd",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "Set last vacuuming timestamp",
        "func": "msg = {}\nmsg.payload = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "3ddae2dbb6c714dd"
            ]
        ]
    },
    {
        "id": "3ddae2dbb6c714dd",
        "type": "set-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "e498a23d75394b05",
        "name": "Last Vaccuming Timestamp",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1280,
        "y": 280,
        "wires": []
    },
    {
        "id": "943c5232d392ac86",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "Run vaccuum if it's been a while",
        "func": "var lastVaccuumRunTimestamp = global.get(\"state\").lastVacuumingTimestamp.value\n\nvar timeSinceLastRun = Date.now() - lastVaccuumRunTimestamp\n\n// Check against constant threshold in milliseconds\n// 32400000 == 9 hours\nif (timeSinceLastRun > 32400000) {\n    // It's been too long\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "199290e9b902581e"
            ]
        ]
    },
    {
        "id": "64757357a5ad8757",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "If someone just came home",
        "func": "if (global.get(\"state\").isAnyoneHome.value == true) {\n    return msg\n}\n// Somebody is home, do nothing\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "f2b43e68a12b2e8d"
            ]
        ]
    },
    {
        "id": "b691222a701921cf",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "Check late at night",
        "props": [],
        "repeat": "",
        "crontab": "*/20 0-4 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "3a29bf394c945c90"
            ]
        ]
    },
    {
        "id": "23498fc68def572a",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "Trigger Vaccuming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 240,
        "wires": [
            [
                "199290e9b902581e"
            ]
        ]
    },
    {
        "id": "c2505b49fc1c31fb",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "Trigger Stop Vaccuming",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "f2b43e68a12b2e8d"
            ]
        ]
    },
    {
        "id": "2192d9c1b6dec6df",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "Check for appropriateness",
        "func": "// If nobody's home just go for it\nif (global.get(\"state\").isAnyoneHome.value == false) {\n    return msg\n}\n\n// If we have guests, bail out\nif (global.get(\"state\").isHaveGuests.value == true) {\n    return null;\n}\n\n// If we have master is not asleep, bail out\nif (global.get(\"state\").isMasterAsleep.value == false) {\n    return null;\n}\n\n// Either nobody's here, or if they are it's just master and NO guests\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "943c5232d392ac86"
            ]
        ]
    },
    {
        "id": "8fd8e8bc26facf1d",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "60c1725bc2519ee0",
        "name": "Everyone Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 100,
        "y": 420,
        "wires": [
            [
                "2c632d54825906f3"
            ]
        ]
    },
    {
        "id": "2c632d54825906f3",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "If someone woke up",
        "func": "if (global.get(\"state\").isEveryoneAsleep.value == false) {\n    return msg\n}\n// Somebody is home, do nothing\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f2b43e68a12b2e8d"
            ]
        ]
    },
    {
        "id": "6fe06cb1caf05123",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "Reset Clean State",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "3ddae2dbb6c714dd"
            ]
        ]
    },
    {
        "id": "757c35142723d92d",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Kitchen",
        "info": "",
        "x": 870,
        "y": 780,
        "wires": []
    },
    {
        "id": "14fafc9f6d18a633",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "e565d65f50e1abb3"
            ]
        ]
    },
    {
        "id": "dff04e040e879291",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 820,
        "wires": [
            [
                "14d24c31ae2299d8"
            ]
        ]
    },
    {
        "id": "30c8dc510f76a88c",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 880,
        "wires": [
            [
                "14fafc9f6d18a633"
            ]
        ]
    },
    {
        "id": "e565d65f50e1abb3",
        "type": "homekit-service",
        "z": "45c21b8b98ae2f01",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Clean Kitchen",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 920,
        "y": 820,
        "wires": [
            [
                "dff04e040e879291"
            ],
            []
        ]
    },
    {
        "id": "14d24c31ae2299d8",
        "type": "switch",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 820,
        "wires": [
            [
                "14fafc9f6d18a633",
                "3a7d329041cf4f53"
            ]
        ]
    },
    {
        "id": "0abf6234b7590992",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Clean All Floors",
        "info": "",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "1cc2997adf18efd4",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "411bfdf502c42f26"
            ]
        ]
    },
    {
        "id": "242cdb71b5e628a8",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 100,
        "wires": [
            [
                "9d3b5f7cafc6afdd"
            ]
        ]
    },
    {
        "id": "3c7015679afdb09a",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 160,
        "wires": [
            [
                "1cc2997adf18efd4"
            ]
        ]
    },
    {
        "id": "411bfdf502c42f26",
        "type": "homekit-service",
        "z": "45c21b8b98ae2f01",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Clean Floors",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "242cdb71b5e628a8"
            ],
            []
        ]
    },
    {
        "id": "9d3b5f7cafc6afdd",
        "type": "switch",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "1cc2997adf18efd4",
                "199290e9b902581e"
            ]
        ]
    },
    {
        "id": "30476d80162c5584",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Entryway",
        "info": "",
        "x": 880,
        "y": 940,
        "wires": []
    },
    {
        "id": "70dd2750ef69c883",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 1040,
        "wires": [
            [
                "bbbe4b1d331694d3"
            ]
        ]
    },
    {
        "id": "bcdb42a387ca65b0",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 980,
        "wires": [
            [
                "b576eb6dde1e8c0d"
            ]
        ]
    },
    {
        "id": "9c6e10d8714bd13f",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 1040,
        "wires": [
            [
                "70dd2750ef69c883"
            ]
        ]
    },
    {
        "id": "bbbe4b1d331694d3",
        "type": "homekit-service",
        "z": "45c21b8b98ae2f01",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Clean Entryway",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 920,
        "y": 980,
        "wires": [
            [
                "bcdb42a387ca65b0"
            ],
            []
        ]
    },
    {
        "id": "b576eb6dde1e8c0d",
        "type": "switch",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 980,
        "wires": [
            [
                "70dd2750ef69c883",
                "d873646ace25c532"
            ]
        ]
    },
    {
        "id": "5e574e77415853b6",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Master Bath",
        "info": "",
        "x": 110,
        "y": 780,
        "wires": []
    },
    {
        "id": "e6178b09c2ead93b",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 880,
        "wires": [
            [
                "bb68bf3e759f5cdf"
            ]
        ]
    },
    {
        "id": "11176f46fc615053",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 820,
        "wires": [
            [
                "034aca5c9ead9aaf"
            ]
        ]
    },
    {
        "id": "6a72915831b6a28c",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "e6178b09c2ead93b"
            ]
        ]
    },
    {
        "id": "bb68bf3e759f5cdf",
        "type": "homekit-service",
        "z": "45c21b8b98ae2f01",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Clean Master Bath",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 150,
        "y": 820,
        "wires": [
            [
                "11176f46fc615053"
            ],
            []
        ]
    },
    {
        "id": "034aca5c9ead9aaf",
        "type": "switch",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 820,
        "wires": [
            [
                "e6178b09c2ead93b",
                "4e3b10f64aa201c4"
            ]
        ]
    },
    {
        "id": "3a29bf394c945c90",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "2192d9c1b6dec6df"
            ]
        ]
    },
    {
        "id": "072e9b000d766ec4",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 90,
        "y": 540,
        "wires": [
            [
                "72772b7050cd06e4"
            ]
        ]
    },
    {
        "id": "71799f916b7138fb",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 90,
        "y": 600,
        "wires": [
            [
                "623978305b080b3c"
            ]
        ]
    },
    {
        "id": "7fbb873572485075",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "3e3052d11dc41010",
        "name": "Is Guest Bedroom Door Open?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 150,
        "y": 660,
        "wires": [
            [
                "e2707d9bae30501b"
            ]
        ]
    },
    {
        "id": "9e2abf81ab49f842",
        "type": "function",
        "z": "45c21b8b98ae2f01",
        "name": "If everyone is awake and bedroom door closed",
        "func": "if (global.get(\"state\").isMasterAsleep.value == true) {\n    return null\n}\nif (global.get(\"state\").isGuestAsleep.value == true) {\n    return null\n}\nif (global.get(\"state\").isGuestBedroomDoorOpen.value == true) {\n    return null\n}\n\n// don't run this if we have guests b/c the signal will be less reliable\nif (global.get(\"state\").isHaveGuests.value == true) {\n    return null\n}\n// Only run this during the day\nif (global.get(\"state\").dayPhase.value != \"day\") {\n    return null\n}\n// Only run this if Nick is gone\nif (global.get(\"state\").isNickHome.value == true) {\n    return null\n}\n// Only run this if Someone is home though; or whole house cleaning should supersede\nif (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\n\nmsg.payload = {\"On\": true}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 600,
        "wires": [
            [
                "d467158e33f7a72c"
            ]
        ]
    },
    {
        "id": "72772b7050cd06e4",
        "type": "trigger",
        "z": "45c21b8b98ae2f01",
        "name": "If stays false for 10 minutes",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 440,
        "y": 540,
        "wires": [
            [
                "9e2abf81ab49f842"
            ]
        ]
    },
    {
        "id": "623978305b080b3c",
        "type": "trigger",
        "z": "45c21b8b98ae2f01",
        "name": "If stays false for 10 minutes",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 440,
        "y": 600,
        "wires": [
            [
                "9e2abf81ab49f842"
            ]
        ]
    },
    {
        "id": "e2707d9bae30501b",
        "type": "trigger",
        "z": "45c21b8b98ae2f01",
        "name": "If stays false for 20 minutes",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "20",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "true",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 440,
        "y": 660,
        "wires": [
            [
                "9e2abf81ab49f842"
            ]
        ]
    },
    {
        "id": "fe257a60613c0601",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Automatically clean master bath and cat shitolopolis after Caroline starts work",
        "info": "",
        "x": 290,
        "y": 500,
        "wires": []
    },
    {
        "id": "d467158e33f7a72c",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "20",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "f8e1dbc52d4f9672"
            ]
        ]
    },
    {
        "id": "434e4fafc2d5e542",
        "type": "get-shared-state",
        "z": "45c21b8b98ae2f01",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 500,
        "y": 720,
        "wires": [
            [
                "9e2abf81ab49f842"
            ]
        ]
    },
    {
        "id": "e45b9584881bf593",
        "type": "comment",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Cat Shitolopolis",
        "info": "",
        "x": 120,
        "y": 940,
        "wires": []
    },
    {
        "id": "efd1b3efbfe849ce",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "Turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.On",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "e55da89ec2dba611"
            ]
        ]
    },
    {
        "id": "f7ad3fcd96886323",
        "type": "delay",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 980,
        "wires": [
            [
                "0bf7d822c2c3f538"
            ]
        ]
    },
    {
        "id": "10dbdaa51dfa2751",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "efd1b3efbfe849ce"
            ]
        ]
    },
    {
        "id": "e55da89ec2dba611",
        "type": "homekit-service",
        "z": "45c21b8b98ae2f01",
        "isParent": true,
        "hostType": "0",
        "bridge": "b2cc5799.eea9d",
        "accessoryId": "",
        "parentService": "",
        "name": "Clean Cat Shitolopolis",
        "serviceName": "Switch",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 160,
        "y": 980,
        "wires": [
            [
                "f7ad3fcd96886323"
            ],
            []
        ]
    },
    {
        "id": "0bf7d822c2c3f538",
        "type": "switch",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "property": "payload.On",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 980,
        "wires": [
            [
                "efd1b3efbfe849ce",
                "de7181d560028c31"
            ]
        ]
    },
    {
        "id": "f8e1dbc52d4f9672",
        "type": "change",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[23, 21]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 600,
        "wires": [
            [
                "407e2c42473be662"
            ]
        ]
    },
    {
        "id": "f2b43e68a12b2e8d",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Dock Vacuum",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "return_to_base",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 580,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "199290e9b902581e",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Start Cleaning",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "start",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 780,
        "y": 280,
        "wires": [
            [
                "a153aee19cd0e1dd"
            ]
        ]
    },
    {
        "id": "4e3b10f64aa201c4",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Master Bath",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "{\"command\":\"app_segment_clean\",\"params\":[{\"segments\":[18],\"repeat\":2}]}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 670,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7bf086516770bcb1",
        "type": "inject",
        "z": "45c21b8b98ae2f01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1200,
        "y": 700,
        "wires": [
            [
                "407e2c42473be662"
            ]
        ]
    },
    {
        "id": "de7181d560028c31",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Cat Shitolopolis",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "{\"command\":\"app_segment_clean\",\"params\":[{\"segments\":[16],\"repeat\":2}]}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 680,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "3a7d329041cf4f53",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Kitchen",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "{\"command\":\"app_segment_clean\",\"params\":[{\"segments\":[21],\"repeat\":2}]}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1440,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "d873646ace25c532",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Entryway",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "{\"command\":\"app_segment_clean\",\"params\":[{\"segments\":[22],\"repeat\":2}]}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1440,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "407e2c42473be662",
        "type": "api-call-service",
        "z": "45c21b8b98ae2f01",
        "name": "Clean Master Bathroom and Cat Shitolopolis",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "vacuum",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "f4ea622f68a4dad33922e5e74f3a4063"
        ],
        "entityId": [],
        "data": "{\"command\":\"app_segment_clean\",\"params\":[{\"segments\":[16,18],\"repeat\":2}]}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1550,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "6d6e6c06f83da0ce",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Fade Out Sleep Sounds",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "928a0a31ac991089",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Ensure master is home and asleep",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\nif (global.get(\"state\").isMasterAsleep.value == false) {\n    return null\n}\nif (global.get(\"state\").musicPlaybackType.value != \"sleep\") {\n    return null\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 100,
        "wires": [
            [
                "e08bfb353c156eb6"
            ]
        ]
    },
    {
        "id": "c725c25378348402",
        "type": "inject",
        "z": "95cf961539320dd3",
        "name": "Check every minute",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "3275d4dbed0798c1"
            ]
        ]
    },
    {
        "id": "3275d4dbed0798c1",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Identify which time triggers are satisfied",
        "func": "var begin_wake_time = new Date(global.get(\"state\").schedule.value.begin_wake)\nvar wake_time = new Date(global.get(\"state\").schedule.value.wake)\nvar stop_screens_time = new Date(global.get(\"state\").schedule.value.stop_screens)\nvar go_to_bed_time = new Date(global.get(\"state\").schedule.value.go_to_bed)\n\nvar now = new Date()\n\nvar ONE_HOUR = 60 * 60 * 1000; /* ms */\n\nif (now.getTime() > begin_wake_time.getTime()) {\n    // Only act if it's been true for less than one hour\n    if ((now.getTime() - begin_wake_time.getTime()) < ONE_HOUR) {\n        msg.topic = \"begin_wake\"\n        node.send(msg)\n    }\n}\n\nif (now.getTime() > wake_time.getTime()) {\n    // Only act if it's been true for less than one hour\n    if ((now.getTime() - wake_time.getTime()) < ONE_HOUR) {\n        msg.topic = \"wake\"\n        node.send(msg)\n    }\n}\n\nif (now.getTime() > stop_screens_time.getTime()) {\n    // Only act if it's been true for less than one hour\n    if ((now.getTime() - stop_screens_time.getTime()) < ONE_HOUR) {\n        msg.topic = \"stop_screens\"\n        node.send(msg)\n    }\n}\n\nif (now.getTime() > go_to_bed_time.getTime()) {\n    // Only act if it's been true for less than one hour\n    if ((now.getTime() - go_to_bed_time.getTime()) < ONE_HOUR) {\n        msg.topic = \"go_to_bed\"\n        node.send(msg)\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 480,
        "wires": [
            [
                "db4ccb257569707c"
            ]
        ]
    },
    {
        "id": "db4ccb257569707c",
        "type": "switch",
        "z": "95cf961539320dd3",
        "name": "Route Messages",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "begin_wake",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wake",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop_screens",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "go_to_bed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 710,
        "y": 480,
        "wires": [
            [
                "1436fedcf61d1e78"
            ],
            [
                "3b11d8f644b1a4bf"
            ],
            [
                "ae68485605384501"
            ],
            [
                "3a134624a0af51fb"
            ]
        ]
    },
    {
        "id": "1436fedcf61d1e78",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "abd63eda68fd8674",
                "933b06632a61b4c2"
            ]
        ]
    },
    {
        "id": "3b11d8f644b1a4bf",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ae68485605384501",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 540,
        "wires": [
            [
                "1085fc2a0db788a3"
            ]
        ]
    },
    {
        "id": "3a134624a0af51fb",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 620,
        "wires": [
            [
                "1085fc2a0db788a3",
                "a2593542cdd2ef2f"
            ]
        ]
    },
    {
        "id": "abd63eda68fd8674",
        "type": "link out",
        "z": "95cf961539320dd3",
        "name": "Before Wakeup",
        "mode": "link",
        "links": [
            "da54c4772dbeeaaf"
        ],
        "x": 1075,
        "y": 340,
        "wires": []
    },
    {
        "id": "da54c4772dbeeaaf",
        "type": "link in",
        "z": "95cf961539320dd3",
        "name": "Fade out sleep sounds",
        "links": [
            "abd63eda68fd8674"
        ],
        "x": 55,
        "y": 100,
        "wires": [
            [
                "928a0a31ac991089"
            ]
        ]
    },
    {
        "id": "598754ddfd55071d",
        "type": "api-call-service",
        "z": "95cf961539320dd3",
        "name": "Turn on Master Bedroom Lights Slowly",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"transition\": 1800, \"color_temp\": 290, \"brightness_pct\": 100}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1990,
        "y": 380,
        "wires": [
            [
                "6bf35b2688ec1674"
            ]
        ]
    },
    {
        "id": "013b7017f85ad5c9",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Before Wakeup time",
        "info": "",
        "x": 930,
        "y": 340,
        "wires": []
    },
    {
        "id": "db0aed47fddfc328",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "At Wakeup time",
        "info": "",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "83673f02cf1c7866",
        "type": "api-call-service",
        "z": "95cf961539320dd3",
        "name": "Flash Lights",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [
            "living_room",
            "nook"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"flash\": \"short\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "7ed38cdcf25b1c70"
            ]
        ]
    },
    {
        "id": "2ef6b47ca1cf0854",
        "type": "api-call-service",
        "z": "95cf961539320dd3",
        "name": "Flash Lights",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [
            "living_room",
            "nook"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"flash\": \"short\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "7ed38cdcf25b1c70",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1680,
        "y": 620,
        "wires": [
            [
                "2ef6b47ca1cf0854"
            ]
        ]
    },
    {
        "id": "468e855f71924dbe",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Flash lights in common areas",
        "info": "",
        "x": 1580,
        "y": 580,
        "wires": []
    },
    {
        "id": "1085fc2a0db788a3",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Check if anyone home and not everyone asleep",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\nif (global.get(\"state\").isEveryoneAsleep.value == true) {\n    return null\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 620,
        "wires": [
            [
                "83673f02cf1c7866"
            ]
        ]
    },
    {
        "id": "732b6e52425b9427",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "When time to stop using screens",
        "info": "",
        "x": 970,
        "y": 500,
        "wires": []
    },
    {
        "id": "96afb3a9d2a7d841",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "When time to go to bed",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "933b06632a61b4c2",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Ensure master is home and asleep",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\nif (global.get(\"state\").isMasterAsleep.value == false) {\n    return null\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 380,
        "wires": [
            [
                "e7c8f97a56f5e10c"
            ]
        ]
    },
    {
        "id": "7096f06620fde73c",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Fade Up Bedroom Lights",
        "info": "",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "1a40e8a8fe20fc43",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Auto Wakeup",
        "info": "",
        "x": 1270,
        "y": 440,
        "wires": []
    },
    {
        "id": "e05bccce05e34da2",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Apply schedule config and trigger as appropriate",
        "info": "",
        "x": 220,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2593542cdd2ef2f",
        "type": "change",
        "z": "95cf961539320dd3",
        "name": "Set Sleep",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sleep",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "4090cc7bb7d087d2"
            ]
        ]
    },
    {
        "id": "4090cc7bb7d087d2",
        "type": "set-shared-state",
        "z": "95cf961539320dd3",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1320,
        "y": 680,
        "wires": []
    },
    {
        "id": "ca6d0e931ce891e2",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Create participant-specific message",
        "func": "// By default, move to set volume and appropriately unmute all players in current playback\nvar speakers = global.get(\"state\").currentlyPlayingMusic.value.participants\n// Iterate over our targets and kick off setting their volume and mute state\nspeakers.forEach(function(target) {\n    var participantSpecificMsg = {}\n    // If this player is in Master suite\n    if (target.player_name.indexOf(\"Master\") > -1) {\n        participantSpecificMsg.playerName = target.player_name\n        node.send(participantSpecificMsg);\n    }\n});\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 100,
        "wires": [
            [
                "7e90140297338312"
            ]
        ]
    },
    {
        "id": "7e90140297338312",
        "type": "sonos-universal",
        "z": "95cf961539320dd3",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.get.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get a volume",
        "x": 1510,
        "y": 100,
        "wires": [
            [
                "560e9e7e53edf40e"
            ]
        ]
    },
    {
        "id": "21072dd8887381eb",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Update known state with the actual current volumes",
        "func": "var observed_volume = msg.payload\nmsg.last_volume_set = observed_volume\n\nvar currentKnownPlayingMusic = global.get(\"state\").currentlyPlayingMusic.value\n\ncurrentKnownPlayingMusic.participants.forEach(function(participant) {\n    if (participant.player_name == msg.playerName) {\n        participant.volume = observed_volume\n    }\n});\n\nvar updateCurrentlyPlayingMusicMsg = {}\nupdateCurrentlyPlayingMusicMsg.payload = currentKnownPlayingMusic\n\nreturn [updateCurrentlyPlayingMusicMsg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "a145eccb5d0b01d4"
            ],
            [
                "b2ce538e032e4961"
            ]
        ]
    },
    {
        "id": "6de7fcb07c82a9ce",
        "type": "set-shared-state",
        "z": "95cf961539320dd3",
        "state": "b74697c734ad5557",
        "name": "Currently Playing Music",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1510,
        "y": 160,
        "wires": []
    },
    {
        "id": "560e9e7e53edf40e",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1680,
        "y": 100,
        "wires": [
            [
                "21072dd8887381eb"
            ]
        ]
    },
    {
        "id": "3da544b5240dcbf7",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Repeat turn downs until 0",
        "func": "console.debug(\"Processing fade out for \" + msg.playerName)\n\n// Is master light still on?\nvar isMasterLightsOff = global.get(\"state\").isMasterLightsOff.value\nif (isMasterLightsOff) {\n    console.debug(\"Master light turned off; abort!\")\n    var resetMsg = {}\n    return [null, null, resetMsg]\n}\n\n// Is sleep music still playing?\nvar musicPlaybackType = global.get(\"state\").musicPlaybackType.value\nif (musicPlaybackType != \"sleep\") {\n    console.debug(\"Canceling fade out for \" + msg.playerName)\n    // Bail out completely because not sleep anymore\n    return [null, null, null]\n}\n\n// What is the volume currently?\nvar current_volume = msg.payload\n\n// Check for someone fighting the system\n/*\nif (current_volume > msg.last_volume_set) {\n    console.debug(\"Found someone fighting fade out for \" + msg.playerName)\n    // If the volume is greater than what was last set, assume someone\n    // is fighting the system trying to keep the volume up\n    var currentlyPlayingMusic = global.get(\"state\").currentlyPlayingMusic.value\n    \n    currentlyPlayingMusic.participants.forEach(function(participant) {\n        // If it's this flow's speaker\n        if (participant.player_name == msg.playerName) {\n            participant.volume = current_volume\n        }\n    });\n    msg.payload = currentlyPlayingMusic\n\n    console.debug(\"Terminating fade out for \" + msg.playerName)\n    return [msg, null, null]\n}*/\n\n// What is the volume supposed to be?\nvar desired_volume = 0\n\n// If we haven't gotten down to the desired volume\nif (current_volume > desired_volume) {\n    console.debug(\"Still need to turn down \" + msg.playerName)\n    var currentlyPlayingMusic = global.get(\"state\").currentlyPlayingMusic.value\n    \n    currentlyPlayingMusic.participants.forEach(function(participant) {\n        // If it's this flow's speaker\n        if (participant.player_name == msg.playerName) {\n            console.debug(\"Found volume config for \" + msg.playerName)\n            participant.volume = current_volume\n            // Reduce its volume by 1\n            participant.volume--;\n            msg.last_volume_set = participant.volume\n            console.debug(\"Adjusted volume config for \" + msg.playerName)\n        }\n    });\n    msg.payload = currentlyPlayingMusic\n    \n    // Set the delay for the next turn down to be greater if volume is lower\n    msg.delay = (60 - current_volume) * 1000\n    console.debug(\"Sending turn down messages for \" + msg.playerName)\n    return [msg, msg, null]\n}\nconsole.debug(\"Completed fade out for \" + msg.playerName)\n// We're done, everything is as it should be",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "4a3bdf6826669285",
                "a145eccb5d0b01d4"
            ],
            [
                "b2ce538e032e4961"
            ],
            [
                "b1c715f0b5055288"
            ]
        ]
    },
    {
        "id": "a05a696cfafb0ca6",
        "type": "sonos-universal",
        "z": "95cf961539320dd3",
        "confignode": "80cf2bfc253ff8c2",
        "command": "player.get.volume",
        "state": "",
        "stateType": "str",
        "avoidCheckPlayerAvailability": false,
        "name": "Get a volume",
        "x": 850,
        "y": 220,
        "wires": [
            [
                "3da544b5240dcbf7"
            ]
        ]
    },
    {
        "id": "b2ce538e032e4961",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "Delay",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "e6f8d0150f8d5cca"
            ]
        ]
    },
    {
        "id": "4a3bdf6826669285",
        "type": "link out",
        "z": "95cf961539320dd3",
        "name": "Set Volumes and Mute",
        "mode": "link",
        "links": [
            "34bd02b0a6ce0a3f"
        ],
        "x": 1255,
        "y": 220,
        "wires": []
    },
    {
        "id": "54ff6f652649f649",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Use normal volume set to apply",
        "info": "",
        "x": 1410,
        "y": 220,
        "wires": []
    },
    {
        "id": "5bc361a44ae4f4fe",
        "type": "inject",
        "z": "95cf961539320dd3",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "e08bfb353c156eb6"
            ]
        ]
    },
    {
        "id": "e6f8d0150f8d5cca",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "a05a696cfafb0ca6"
            ]
        ]
    },
    {
        "id": "e7c8f97a56f5e10c",
        "type": "api-call-service",
        "z": "95cf961539320dd3",
        "name": "Ensure lights are white and dim to start",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"transition\": 0, \"color_temp\": 290, \"brightness_pct\": 1}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1520,
        "y": 380,
        "wires": [
            [
                "9f1324d760a908d7"
            ]
        ]
    },
    {
        "id": "9f1324d760a908d7",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1760,
        "y": 380,
        "wires": [
            [
                "598754ddfd55071d"
            ]
        ]
    },
    {
        "id": "a145eccb5d0b01d4",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1310,
        "y": 160,
        "wires": [
            [
                "6de7fcb07c82a9ce"
            ]
        ]
    },
    {
        "id": "6bf35b2688ec1674",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "b8d397a9ae2bf8a5"
            ]
        ]
    },
    {
        "id": "b8d397a9ae2bf8a5",
        "type": "change",
        "z": "95cf961539320dd3",
        "name": "Set wakeup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "wakeup",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 480,
        "wires": [
            [
                "097c01da17685547"
            ]
        ]
    },
    {
        "id": "8c07a2c7f720a6a8",
        "type": "set-shared-state",
        "z": "95cf961539320dd3",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1940,
        "y": 480,
        "wires": []
    },
    {
        "id": "097c01da17685547",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Ensure master is home and asleep",
        "func": "if (global.get(\"state\").isAnyoneHome.value == false) {\n    return null\n}\nif (global.get(\"state\").isMasterAsleep.value == false) {\n    return null\n}\n\n// Is master light still on?\nvar isMasterLightsOff = global.get(\"state\").isMasterLightsOff.value\nif (isMasterLightsOff) {\n    console.debug(\"Master light turned off; abort!\")\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 480,
        "wires": [
            [
                "8c07a2c7f720a6a8"
            ]
        ]
    },
    {
        "id": "ec628f54ff3683fb",
        "type": "ttsultimate",
        "z": "95cf961539320dd3",
        "name": "",
        "voice": "en-US",
        "ssml": false,
        "sonosipaddress": "10.212.100.227",
        "sonosvolume": "33",
        "sonoshailing": "0",
        "config": "89337ebbba16965d",
        "property": "payload",
        "propertyType": {},
        "rules": [],
        "playertype": "sonos",
        "speakingrate": "1",
        "speakingpitch": "0",
        "unmuteIfMuted": true,
        "elevenlabsStability": "",
        "elevenlabsSimilarity_boost": "",
        "x": 710,
        "y": 100,
        "wires": [
            [
                "fa073067dec5e147"
            ],
            []
        ]
    },
    {
        "id": "e08bfb353c156eb6",
        "type": "function",
        "z": "95cf961539320dd3",
        "name": "Generate message",
        "func": "\n// If both of us are home\nif (global.get(\"state\").isNickHome.value && global.get(\"state\").isCarolineHome.value) {\n    console.debug(\"Both are home, tell them to cuddle\")\n    // Direct us to cuddle\n    var notification_message = \"Time for cuddles\"\n    msg.payload = notification_message\n    return [msg, null];\n} else {\n    console.debug(\"Only one is home, cuddle is not possible\")\n    // Otherwise bypass TTS step\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "ec628f54ff3683fb"
            ],
            [
                "38d1aa796e6b88c5"
            ]
        ]
    },
    {
        "id": "ac4482db16ab66b6",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Cuddle notification",
        "info": "",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "38d1aa796e6b88c5",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 100,
        "wires": [
            [
                "ca6d0e931ce891e2"
            ]
        ]
    },
    {
        "id": "dcd4c0c7fc94cfc3",
        "type": "set-shared-state",
        "z": "95cf961539320dd3",
        "state": "50613c29969588a5",
        "name": "Master Lights Off",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 570,
        "y": 780,
        "wires": []
    },
    {
        "id": "0e047d1f7a9084e6",
        "type": "server-state-changed",
        "z": "95cf961539320dd3",
        "name": "Master Bedroom Lights Off",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "light.master_bedroom",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 780,
        "wires": [
            [
                "f7759613c21fcde5"
            ],
            [
                "fe739b9a0665932d"
            ]
        ]
    },
    {
        "id": "77a7cc78dea4aec9",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Cancel auto-wake",
        "info": "",
        "x": 130,
        "y": 740,
        "wires": []
    },
    {
        "id": "81d3079d50bf1c36",
        "type": "inject",
        "z": "95cf961539320dd3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1200,
        "y": 340,
        "wires": [
            [
                "e7c8f97a56f5e10c"
            ]
        ]
    },
    {
        "id": "f7759613c21fcde5",
        "type": "change",
        "z": "95cf961539320dd3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 760,
        "wires": [
            [
                "dcd4c0c7fc94cfc3"
            ]
        ]
    },
    {
        "id": "fe739b9a0665932d",
        "type": "change",
        "z": "95cf961539320dd3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 800,
        "wires": [
            [
                "dcd4c0c7fc94cfc3"
            ]
        ]
    },
    {
        "id": "89c1d2a03ec52517",
        "type": "link call",
        "z": "95cf961539320dd3",
        "name": "Reset Music",
        "links": [
            "b1f2b5145a191585"
        ],
        "timeout": "30",
        "x": 910,
        "y": 40,
        "wires": [
            [
                "fa073067dec5e147"
            ]
        ]
    },
    {
        "id": "1ca8abad4ced181a",
        "type": "catch",
        "z": "95cf961539320dd3",
        "name": "Catch TTS Error",
        "scope": [
            "ec628f54ff3683fb"
        ],
        "uncaught": false,
        "x": 720,
        "y": 40,
        "wires": [
            [
                "89c1d2a03ec52517"
            ]
        ]
    },
    {
        "id": "fa073067dec5e147",
        "type": "delay",
        "z": "95cf961539320dd3",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "38d1aa796e6b88c5"
            ]
        ]
    },
    {
        "id": "b1c715f0b5055288",
        "type": "link out",
        "z": "95cf961539320dd3",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "5374a17b2d4ccaee"
        ],
        "x": 1255,
        "y": 260,
        "wires": []
    },
    {
        "id": "fee3a0db91eb009f",
        "type": "comment",
        "z": "95cf961539320dd3",
        "name": "Bring back the rain!",
        "info": "",
        "x": 1370,
        "y": 260,
        "wires": []
    },
    {
        "id": "a99efe1134ae512d",
        "type": "log-elk",
        "z": "9e0490d1fc323107",
        "name": "Log",
        "logger": "e98cb8b7d7a02f27",
        "complete": "payload",
        "loglevel": "info",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "397f1108a960601f",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "99455ccf.2c8498",
        "name": "Caroline Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "a2c6403a03dfe142",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "b74697c734ad5557",
        "name": "Currently Playing Music",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "e814263e57b76d82",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "60c1725bc2519ee0",
        "name": "Everyone Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "6c3515ab36ce9cbc",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "156ccde543ba4845",
        "name": "Guest Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "1acc23f7c21becd6",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "a5ea3d0a7df352b2",
        "name": "Have Guests?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "2aa7698b4364880c",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "86b433f8beadaac5",
        "name": "Hue Config",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 360,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "ba6acb2cd13275c6",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "3e3052d11dc41010",
        "name": "Is Guest Bedroom Door Open?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 210,
        "y": 400,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "99e192fa7b4ef8b6",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "8c8dbb69a0c4c67f",
        "name": "Is Master Bedroom Door Open?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 210,
        "y": 440,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "a51249a224ea8dbb",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "224e1c91419b027f",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "9784d6c488d7a77e",
        "name": "Is TV On?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 480,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "946ab51969f69a22",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "d9abb6b3441e0c2a",
        "name": "Is TV Playing?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 520,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "d302fd95b8fbd25a",
        "type": "function",
        "z": "9e0490d1fc323107",
        "name": "If object move to such an attribute",
        "func": "value = msg.payload\n\nmsg.payload = {}\n\nmsg.payload.variable = msg.topic\n\nif (typeof value == \"object\") {\n    msg.payload.object = value\n    msg.payload.type = \"object\"\n    msg.payload.object_string = JSON.stringify(msg.payload.object);\n} else if (typeof value == \"string\") {\n    msg.payload.string = value\n    msg.payload.type = \"string\"\n} else if (typeof value == \"number\") {\n    msg.payload.number = value\n    msg.payload.type = \"number\"\n} else if (typeof value == \"boolean\") {\n    msg.payload.boolean = value\n    msg.payload.type = \"boolean\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 500,
        "wires": [
            [
                "a99efe1134ae512d"
            ]
        ]
    },
    {
        "id": "f2d07297affa0f44",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "e498a23d75394b05",
        "name": "Last Vaccuming Timestamp",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 200,
        "y": 560,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "428ef2c98f36c39f",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "b69e9a96.7fc43",
        "name": "Master Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 600,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "aaaec1687e570cc8",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "e4f5bf03444063a0",
        "name": "Music Config",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 150,
        "y": 640,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "892a1fa97788998f",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "8f0e34f261117ab2",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "659fd61043193a4d",
        "name": "Music Playlist Numbers",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 180,
        "y": 720,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "a932511e3452f810",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "e3cb7570.0dbb48",
        "name": "Nick Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 760,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "e5b05347dbf080c9",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "3d96ef25996d1dd1",
        "name": "Reset",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 130,
        "y": 800,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "d6f35e4b01de6c88",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "f4fbefedb919c3c1",
        "name": "Schedule",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 840,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "b65bf0d89d2df038",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "174c278f.609ec8",
        "name": "Sun Event",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 140,
        "y": 880,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "1720b539ad30b259",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "611761b9dd5c9c4c",
        "name": "Climate Config",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "25ce20e84e6765a8",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "1ce72a9fb27d8577",
        "name": "Is Humdifier On?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "d5bf6da70ddd047d",
        "type": "get-shared-state",
        "z": "9e0490d1fc323107",
        "state": "26ccc92b36b23b99",
        "name": "Anyone Asleep",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 380,
        "y": 120,
        "wires": [
            [
                "d302fd95b8fbd25a"
            ]
        ]
    },
    {
        "id": "f52083fdd7491f1b",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "b8f64fef44da2ad4"
            ]
        ]
    },
    {
        "id": "b8f64fef44da2ad4",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Humidifiy or not to humidifiy?",
        "func": "var musicPlaybackType = global.get(\"state\").musicPlaybackType.value\n\n// If it's day or evening there's no point in humidifying\nif (musicPlaybackType == \"morning\" ||\n    musicPlaybackType == \"day\" ||\n    musicPlaybackType == \"evening\" ||\n    musicPlaybackType == \"winddown\"\n) {\n    console.debug(\"No, don't humidify!\")\n    return [msg, null]\n}\n// If it's winddown or sleep definitely humidify\nif (musicPlaybackType == \"sleep\") {\n    console.debug(\"Yes humidify!\")\n    return [null, msg]\n}\n// Otherwise, not so clear so do nothing\nconsole.debug(\"Don't change humidification state\")\nreturn [null, null]",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "f9d66d0649e9bd11"
            ],
            [
                "2262ccb67c3b1114"
            ]
        ]
    },
    {
        "id": "c02601d37dfb8fc1",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Turn on humidification",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "humidifier",
        "service": "turn_on",
        "areaId": [
            "master_bedroom"
        ],
        "deviceId": [
            "3a7bab5f23e10f98bb210ea2e7ca54a0"
        ],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "8a6956eba86703b9"
            ]
        ]
    },
    {
        "id": "b4138b425944434b",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Turn off humidification",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "humidifier",
        "service": "turn_off",
        "areaId": [
            "master_bedroom"
        ],
        "deviceId": [
            "3a7bab5f23e10f98bb210ea2e7ca54a0"
        ],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1060,
        "y": 40,
        "wires": [
            [
                "fefbf7c03885030f"
            ]
        ]
    },
    {
        "id": "20102ed2a3a10d6b",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "99455ccf.2c8498",
        "name": "Caroline Home",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 100,
        "y": 300,
        "wires": [
            [
                "0a1bdf274467562a"
            ]
        ]
    },
    {
        "id": "0a1bdf274467562a",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "Not Home",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "2d3889f3b872a383"
            ]
        ]
    },
    {
        "id": "a30febd4f0f1f98a",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Run master bedroom humidifier at night",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "d712f79e9cfd991a",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Reset Oscillation when Caroline Leaves or Sleeps",
        "info": "",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "2d3889f3b872a383",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Turn on oscillation",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "oscillate",
        "areaId": [
            "guest_suite",
            "living_room_2",
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"oscillating\": \"on\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 510,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5c736f9253fa9ba2",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "b7959b8b695cb2e3",
        "name": "Current Climate",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 100,
        "y": 460,
        "wires": [
            [
                "23755656ed766d1e"
            ]
        ]
    },
    {
        "id": "a96e02e59ea320ab",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "1dd96a4a.9d6316",
        "name": "Anyone Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 90,
        "y": 520,
        "wires": [
            [
                "9ca03041089b6a9d",
                "23755656ed766d1e"
            ]
        ]
    },
    {
        "id": "23755656ed766d1e",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Should we change fan speed?",
        "func": "// If nobody's home, slow the fans down to very low\nif (global.get(\"state\").isAnyoneHome.value == false) {\n    return [msg, null]\n} else {\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "4925b947985b2af7"
            ],
            [
                "d1b0e83735d42234"
            ]
        ]
    },
    {
        "id": "9ca03041089b6a9d",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "Just got home",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "86f2aa4cdf686bb5"
            ]
        ]
    },
    {
        "id": "8bcd7836afc9a713",
        "type": "inject",
        "z": "6a064f420a191bf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "81b04d253cd97b0f"
            ]
        ]
    },
    {
        "id": "81b04d253cd97b0f",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 620,
        "wires": [
            [
                "e98856f0458e6d20"
            ]
        ]
    },
    {
        "id": "494cb5fc939fcbee",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 620,
        "wires": [
            [
                "d1b0e83735d42234"
            ]
        ]
    },
    {
        "id": "e98856f0458e6d20",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Max fan speed",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "set_percentage",
        "areaId": [
            "guest_suite",
            "living_room_2",
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"percentage\": 100}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 680,
        "y": 620,
        "wires": [
            [
                "494cb5fc939fcbee"
            ]
        ]
    },
    {
        "id": "402a3618544d57e1",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Run hard for a little while",
        "info": "",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "4925b947985b2af7",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Low fan speed everywhere",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "set_percentage",
        "areaId": [
            "guest_suite",
            "living_room_2",
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"percentage\": 10}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 600,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d6780dc3d1f346a0",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Send fan speed messages",
        "func": "console.debug(\"Preparing to set fan speeds, msg.topic was \" + msg.topic)\n\n// Get climate data\nvar currentClimate = global.get(\"state\").currentClimate.value\n\n// Handle Master Suite\nvar desiredFanSpeed = currentClimate[\"Master Bedroom\"][\"fan speed\"]\nmsg.payload = {\"percentage\": desiredFanSpeed}\nconsole.debug(\"Setting Master Suite fan speed to \" + desiredFanSpeed)\nnode.send([msg, null, null])\n\n// Handle Living Room\nvar desiredFanSpeed = currentClimate[\"Living Room Center\"][\"fan speed\"]\nmsg.payload = { \"percentage\": desiredFanSpeed }\nconsole.debug(\"Setting Living Room fan speed to \" + desiredFanSpeed)\nnode.send([null, msg, null])\n\n// Handle Guest Suite\nvar desiredFanSpeed = currentClimate[\"Bedroom\"][\"fan speed\"]\nmsg.payload = { \"percentage\": desiredFanSpeed }\nconsole.debug(\"Setting Bedroom fan speed to \" + desiredFanSpeed)\nnode.send([null, null, msg])\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            [
                "a78adf1024effbae"
            ],
            [
                "8677bb871d025c89"
            ],
            [
                "0e7095f3697a1233"
            ]
        ]
    },
    {
        "id": "a78adf1024effbae",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Master Suite Fan Speed",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "set_percentage",
        "areaId": [
            "master_bedroom"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1190,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b460a2f7c87f3795",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Living Room Fan Speed",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "set_percentage",
        "areaId": [
            "living_room_2"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1190,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8292bb8f30d17629",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Guest Suite Fan Speed",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "fan",
        "service": "set_percentage",
        "areaId": [
            "guest_suite"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "msg.payload",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1190,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "eda51c7dc115d229",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "60c1725bc2519ee0",
        "name": "Everyone Asleep",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 100,
        "y": 360,
        "wires": [
            [
                "830e383c6a6cf5f5"
            ]
        ]
    },
    {
        "id": "db1966bfa72a10da",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Set fan speeds based on presence and climate",
        "info": "",
        "x": 200,
        "y": 420,
        "wires": []
    },
    {
        "id": "830e383c6a6cf5f5",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "Yes asleep",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 360,
        "wires": [
            [
                "2d3889f3b872a383"
            ]
        ]
    },
    {
        "id": "b463d3c960f6c8f3",
        "type": "inject",
        "z": "6a064f420a191bf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 380,
        "wires": [
            [
                "2d3889f3b872a383",
                "d1b0e83735d42234"
            ]
        ]
    },
    {
        "id": "caa6aa12e7dda2e1",
        "type": "link in",
        "z": "6a064f420a191bf8",
        "name": "Reset Fan Speeds",
        "links": [
            "e6de6db28626e551",
            "adc754d173d18011"
        ],
        "x": 405,
        "y": 500,
        "wires": [
            [
                "d1b0e83735d42234"
            ]
        ]
    },
    {
        "id": "225f857752659a36",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Collect Temperature and Humidity Data",
        "info": "",
        "x": 170,
        "y": 680,
        "wires": []
    },
    {
        "id": "156f16e0c85e2816",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.master_bedroom_humidity",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 580,
        "y": 720,
        "wires": [
            [
                "06780408ced82219"
            ]
        ]
    },
    {
        "id": "975576f9dbe21947",
        "type": "inject",
        "z": "6a064f420a191bf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "a8b85510e85625a1",
                "9c377bc17a4aa03a",
                "414b598fd90ee4de",
                "9a39ae1dd8b22980",
                "9fe8377df9dba651",
                "d0a15d3cd2962152",
                "ccf4342cd237b4fe",
                "1e71b32d69eb7fe6",
                "bbaee6b986a4ee5a",
                "74a55f2e663011fe",
                "92d666b35803f2de",
                "061b203d058d17ea",
                "0f7dfc87e814fb16",
                "2c533a8589d2fa9c",
                "642e635566504ed6",
                "8938a2be3cfaf03a",
                "2dafe3bdd3ee5d2b",
                "cfc5a331173089fe",
                "f0c952769f734465",
                "36a677075665f73f",
                "09360934291defa6"
            ]
        ]
    },
    {
        "id": "75cb9283e2cb7aba",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_humidity",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "eb26439b8c2472f8"
            ]
        ]
    },
    {
        "id": "2ec3a969aa01e5c2",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_humidity_2",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "c463febc133f46b6"
            ]
        ]
    },
    {
        "id": "b3fd89c4de936d7c",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.bedroom_humidity",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 900,
        "wires": [
            [
                "605c125667351b1d"
            ]
        ]
    },
    {
        "id": "589452f0e043686c",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.master_bedroom_temperature",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 600,
        "y": 960,
        "wires": [
            [
                "c00c1d09dc355e50"
            ]
        ]
    },
    {
        "id": "19c242d2027aedf7",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_temperature",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 580,
        "y": 1020,
        "wires": [
            [
                "31739342eb065d47"
            ]
        ]
    },
    {
        "id": "59ac828528febe57",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_temperature_2",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 590,
        "y": 1080,
        "wires": [
            [
                "8a3e7c2d711a2d47"
            ]
        ]
    },
    {
        "id": "921d40799aa20523",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.bedroom_temperature",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 1140,
        "wires": [
            [
                "480f8c2ce0a49284"
            ]
        ]
    },
    {
        "id": "605c125667351b1d",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "816d3fb762a92b71",
        "name": "Humidity of Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 900,
        "wires": []
    },
    {
        "id": "c463febc133f46b6",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "d19054ef0f693509",
        "name": "Humidity of Living Room Window",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1300,
        "y": 840,
        "wires": []
    },
    {
        "id": "eb26439b8c2472f8",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "7e0b34e77bae8edb",
        "name": "Humidity of Living Room Center",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1290,
        "y": 780,
        "wires": []
    },
    {
        "id": "06780408ced82219",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "51ddddf9304ec19f",
        "name": "Humidity of Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1280,
        "y": 720,
        "wires": []
    },
    {
        "id": "c00c1d09dc355e50",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "4faab2d5448df995",
        "name": "Temperature of Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1290,
        "y": 960,
        "wires": []
    },
    {
        "id": "31739342eb065d47",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "098765180c8f29ad",
        "name": "Temperature of Living Room Center",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1300,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8a3e7c2d711a2d47",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "0133e13457d0b692",
        "name": "Temperature of Living Room Window",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1310,
        "y": 1080,
        "wires": []
    },
    {
        "id": "480f8c2ce0a49284",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "60f1a7e39e0a4f1c",
        "name": "Temperature of Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1270,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5c5b49d9b27da7ce",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Build air condition report",
        "func": "// Define shell of report\nreport = {\n    \"Master Bedroom\": {\n        \"temperature\": 0,\n        \"humidity\": 0,\n        \"formaldehyde\": 0,\n        \"pm2.5\": 0,\n        \"voc\": 0\n    },\n    \"Living Room Window\": {\n        \"temperature\": 0,\n        \"humidity\": 0\n    },\n    \"Living Room Center\": {\n        \"temperature\": 0,\n        \"humidity\": 0,\n        \"formaldehyde\": 0,\n        \"pm2.5\": 0,\n        \"voc\": 0\n    },\n    \"Bedroom\": {\n        \"temperature\": 0,\n        \"humidity\": 0,\n        \"formaldehyde\": 0,\n        \"pm2.5\": 0,\n        \"voc\": 0\n    },\n    \"Average\": {\n        \"temperature\": 0,\n        \"humidity\": 0\n    },\n    \"Outside\": {\n        \"temperature\": 0,\n        \"humidity\": 0\n    }\n}\n// Record Master Bedroom values\nreport[\"Master Bedroom\"].temperature = Math.round(global.get(\"state\").temperatureOfMasterBedroom.value)\nreport[\"Master Bedroom\"].humidity = global.get(\"state\").humidityOfMasterBedroom.value\nreport[\"Master Bedroom\"].formaldehyde = global.get(\"state\").formaldehydeOfMasterBedroom.value\nreport[\"Master Bedroom\"][\"pm2.5\"] = global.get(\"state\").pm25OfMasterBedroom.value\nreport[\"Master Bedroom\"][\"voc\"] = global.get(\"state\").vocOfMasterBedroom.value\nreport[\"Master Bedroom\"][\"humidity control\"] = {}\nreport[\"Master Bedroom\"][\"humidity control\"][\"humidifier on\"] = global.get(\"state\").isHumidifierOn.value\nreport[\"Master Bedroom\"][\"humidity control\"][\"desired humidity\"] = global.get(\"state\").desiredHumidityOfMasterBedroom.value\n\n// Record Living Room Window values\nreport[\"Living Room Window\"].temperature = Math.round(global.get(\"state\").temperatureOfLivingRoomWindow.value)\nreport[\"Living Room Window\"].humidity = global.get(\"state\").humidityOfLivingRoomWindow.value\n// Record Living Room Center values\nreport[\"Living Room Center\"].temperature = Math.round(global.get(\"state\").temperatureOfLivingRoomCenter.value)\nreport[\"Living Room Center\"].humidity = global.get(\"state\").humidityOfLivingRoomCenter.value\nreport[\"Living Room Center\"].formaldehyde = global.get(\"state\").formaldehydeOfLivingRoom.value\nreport[\"Living Room Center\"][\"pm2.5\"] = global.get(\"state\").pm25OfLivingRoom.value\nreport[\"Living Room Center\"][\"voc\"] = global.get(\"state\").vocOfLivingRoom.value\n\n// Record Bedroom values\nreport[\"Bedroom\"].temperature = Math.round(global.get(\"state\").temperatureOfBedroom.value)\nreport[\"Bedroom\"].humidity = global.get(\"state\").humidityOfBedroom.value\nreport[\"Bedroom\"].formaldehyde = global.get(\"state\").formaldehydeOfBedroom.value\nreport[\"Bedroom\"][\"pm2.5\"] = global.get(\"state\").pm25OfBedroom.value\nreport[\"Bedroom\"][\"voc\"] = global.get(\"state\").vocOfBedroom.value\n\n// Define function for averaging values\nconst average = array => Math.round(array.reduce((a, b) => a + b) / array.length);\n// Take average temperature\nreport[\"Average\"].temperature = average([\n                                            report[\"Master Bedroom\"].temperature,\n                                            report[\"Living Room Center\"].temperature,\n                                            report[\"Living Room Window\"].temperature\n                                        ])\n// Take average humidity                       \nreport[\"Average\"].humidity = average([\n                                            report[\"Master Bedroom\"].humidity,\n                                            report[\"Living Room Center\"].humidity,\n                                            report[\"Living Room Window\"].humidity\n                                        ])\n\n\n// Record Outside values\nreport[\"Outside\"].temperature = Math.round(global.get(\"state\").temperatureOfOutside.value)\nreport[\"Outside\"].humidity = global.get(\"state\").humidityOfOutside.value\n\nmsg.payload = report\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1920,
        "wires": [
            [
                "2ca0e3b65317dcaa"
            ]
        ]
    },
    {
        "id": "67c5137b0466f356",
        "type": "log-elk",
        "z": "6a064f420a191bf8",
        "name": "Log",
        "logger": "e98cb8b7d7a02f27",
        "complete": "payload",
        "loglevel": "info",
        "x": 1110,
        "y": 2000,
        "wires": []
    },
    {
        "id": "142fd9870b53a95d",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "ae87c948b424fbf9",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "396fb4253e303c36",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6345360059b9e468",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "9a9bfb194f2bc4dd",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "5c02b4ad91b25140",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "26ef1be69d85f102",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "feadb618e7635a07",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f9d66d0649e9bd11",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 710,
        "y": 40,
        "wires": [
            [
                "3ac1f5afde110dd5"
            ]
        ]
    },
    {
        "id": "2262ccb67c3b1114",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 100,
        "wires": [
            [
                "185597969597ddde"
            ]
        ]
    },
    {
        "id": "9487045d442fbd6a",
        "type": "api-call-service",
        "z": "6a064f420a191bf8",
        "name": "Restart Home Assistant",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "restart",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "e1c842ce5903a98e"
            ]
        ]
    },
    {
        "id": "d640980ca6e1b2b1",
        "type": "catch",
        "z": "6a064f420a191bf8",
        "name": "Catch Dyson Errors",
        "scope": [
            "c02601d37dfb8fc1",
            "b4138b425944434b",
            "2d3889f3b872a383",
            "4925b947985b2af7",
            "a78adf1024effbae",
            "b460a2f7c87f3795",
            "8292bb8f30d17629"
        ],
        "uncaught": false,
        "x": 890,
        "y": 360,
        "wires": [
            [
                "c838778390ca81b8"
            ]
        ]
    },
    {
        "id": "c838778390ca81b8",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 360,
        "wires": [
            [
                "e137a7a92df1509a"
            ]
        ]
    },
    {
        "id": "e137a7a92df1509a",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "a649f7d60ee87e24"
            ]
        ]
    },
    {
        "id": "adc754d173d18011",
        "type": "link out",
        "z": "6a064f420a191bf8",
        "name": "",
        "mode": "link",
        "links": [
            "6016baf9f8808810",
            "caa6aa12e7dda2e1"
        ],
        "x": 1935,
        "y": 360,
        "wires": []
    },
    {
        "id": "6016baf9f8808810",
        "type": "link in",
        "z": "6a064f420a191bf8",
        "name": "Reset Humidifiers",
        "links": [
            "adc754d173d18011"
        ],
        "x": 265,
        "y": 120,
        "wires": [
            [
                "b8f64fef44da2ad4"
            ]
        ]
    },
    {
        "id": "cf5205abceb397a2",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Handle Dyson Communication Errors",
        "info": "",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "a649f7d60ee87e24",
        "type": "change",
        "z": "6a064f420a191bf8",
        "name": "Override Rate Limits",
        "rules": [
            {
                "t": "set",
                "p": "rate",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 360,
        "wires": [
            [
                "9487045d442fbd6a"
            ]
        ]
    },
    {
        "id": "3ac1f5afde110dd5",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 40,
        "wires": [
            [
                "b4138b425944434b"
            ]
        ]
    },
    {
        "id": "185597969597ddde",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 100,
        "wires": [
            [
                "c02601d37dfb8fc1"
            ]
        ]
    },
    {
        "id": "1e9541493a2ef7b4",
        "type": "inject",
        "z": "6a064f420a191bf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "b8f64fef44da2ad4"
            ]
        ]
    },
    {
        "id": "1ab2bb4d53bedd65",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "1ce72a9fb27d8577",
        "name": "Is Humdifier On?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1390,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa5d9866f07171f2",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "1ce72a9fb27d8577",
        "name": "Is Humdifier On?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1390,
        "y": 40,
        "wires": []
    },
    {
        "id": "8a6956eba86703b9",
        "type": "change",
        "z": "6a064f420a191bf8",
        "name": "True",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "1ab2bb4d53bedd65"
            ]
        ]
    },
    {
        "id": "fefbf7c03885030f",
        "type": "change",
        "z": "6a064f420a191bf8",
        "name": "False",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 40,
        "wires": [
            [
                "fa5d9866f07171f2"
            ]
        ]
    },
    {
        "id": "c8d0a2af88c5d967",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "weather.home",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "$entity().attributes.temperature",
                "valueType": "jsonata"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 520,
        "y": 1740,
        "wires": [
            [
                "8bb8368fdc6c8511"
            ]
        ]
    },
    {
        "id": "540b66982a79e256",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "21cd8d0ba24c57ec",
        "name": "Temperature Of Outside",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1270,
        "y": 1740,
        "wires": []
    },
    {
        "id": "8bb8368fdc6c8511",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 896,
        "y": 1739,
        "wires": [
            [
                "540b66982a79e256"
            ]
        ]
    },
    {
        "id": "b801117a19b49b89",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "weather.home",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "$entity().attributes.humidity",
                "valueType": "jsonata"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 520,
        "y": 1800,
        "wires": [
            [
                "7fab3cc451e297b5"
            ]
        ]
    },
    {
        "id": "e02d8abb3fc61b7c",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "fdd67c92f6cdbe67",
        "name": "Humditiy of Outside",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 1800,
        "wires": []
    },
    {
        "id": "7fab3cc451e297b5",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 896,
        "y": 1799,
        "wires": [
            [
                "e02d8abb3fc61b7c"
            ]
        ]
    },
    {
        "id": "2ca0e3b65317dcaa",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Add Dewpoint",
        "func": "// From https://www.decatur.de/javascript/dew/dew-js.html\n\n/**\n * File dew.js\n * Copyright 2003 Wolfgang Kuehn\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *       http://www.apache.org/licenses/LICENSE-2.0\n */\n\nvar KELVIN = 0;\nvar CELSIUS = 1;\nvar FAHRENHEIT = 2;\n\nvar C_OFFSET = 273.15;\nvar F_C = 9.0/5.0;\n\nvar RELATIVE = 1;\nvar ABSOLUTE = 2;\n\nfunction Temperatures() {\n  this.array = new Array();\n}\n\nTemperatures.prototype.add = function(t) {\n  if (t.value!=null)\n    this.array[this.array.length] = t;\n}\n\nvar temps = new Temperatures();\n\nTemperatures.prototype.syncronize = function() {\n  for (var e in this.array) {\n    var t = this.array[e];\n    if (t.value!=null)\n      t.onChange();\n  }\n}\n\nTemperatures.prototype.setScale = function(scale) {\n  for (var e in this.array)\n    this.array[e].setScale(scale);\n}\n\nfunction Temperature(value, scale, elem) {\n  this.value;\n  this.scale = scale;\n  this.element = elem;\n  this.set(value);\n  temps.add(this);\n}\n\nTemperature.prototype.onChange = function() {\n  var v = stringToFloat(this.element.value);\n  this.set(v);\n}\n\nTemperature.prototype.update = function() {\n  if (this.element!=null)\n    this.element.value = truncate(this.get(),2,ABSOLUTE);\n}\n\nTemperature.prototype.setScale = function(scale) {\n  this.scale = scale;\n  this.update(); \n}\n\nTemperature.prototype.getScale = function() {\n  return this.scale;\n}\n\nTemperature.prototype.getKelvin = function() {\n  return this.value;\n}\n\nTemperature.prototype.setKelvin = function(value) {\n  this.value = value;\n  this.update();\n}\n\nTemperature.prototype.get = function() {\n  var v = this.value;\n  if (this.scale==CELSIUS)\n    v -= C_OFFSET;\n  else if (this.scale==FAHRENHEIT)\n    v = 32+(v-C_OFFSET)*F_C;\n  return v;\n}\n\nTemperature.prototype.set = function(value) {\n  this.value = value;\n  if (this.scale==CELSIUS)\n    this.value += C_OFFSET;\n  else if (this.scale==FAHRENHEIT)\n    this.value = (this.value-32)/F_C+C_OFFSET;\n  this.update();\n}\n\nTemperature.prototype.setElement = function(element) {\n  this.element = element;\n  this.update();\n}\n\nfunction TemperatureChange(value, scale, element) {\n  this.scale = scale;\n  this.element = element;\n  this.set(value);\n  temps.add(this);\n}\n\nTemperatureChange.prototype = new Temperature();\n\nTemperatureChange.prototype.get = function() {\n  var v = this.value;\n  if (this.scale==FAHRENHEIT)\n    v = v*F_C;\n  return v;\n}\n\nTemperatureChange.prototype.set = function(value) {\n  this.value = value;\n  if (this.scale==FAHRENHEIT)\n    this.value = this.value/F_C;\n  this.update();\n}\n\n\nvar minT = 173; // -100 Deg. C.\nvar maxT = 678;\n\n/*\n * Saturation Vapor Pressure formula for range -100..0 Deg. C.\n * This is taken from\n *   ITS-90 Formulations for Vapor Pressure, Frostpoint Temperature,\n *   Dewpoint Temperature, and Enhancement Factors in the Range 100 to +100 C\n * by Bob Hardy\n * as published in \"The Proceedings of the Third International Symposium on Humidity & Moisture\",\n * Teddington, London, England, April 1998\n*/\nvar k0 = -5.8666426e3;\nvar k1 = 2.232870244e1;\nvar k2 = 1.39387003e-2;\nvar k3 = -3.4262402e-5;\nvar k4 = 2.7040955e-8;\nvar k5 = 6.7063522e-1;\n\nfunction pvsIce(T) {\n  var lnP = k0/T + k1 + (k2 + (k3 + (k4*T))*T)*T + k5*Math.log(T);\n  return Math.exp(lnP);\n}\n\n/**\n * Saturation Vapor Pressure formula for range 273..678 Deg. K.\n * This is taken from the\n *   Release on the IAPWS Industrial Formulation 1997\n *   for the Thermodynamic Properties of Water and Steam\n * by IAPWS (International Association for the Properties of Water and Steam),\n * Erlangen, Germany, September 1997.\n *\n * This is Equation (30) in Section 8.1 \"The Saturation-Pressure Equation (Basic Equation)\"\n*/\n\nvar n1 = 0.11670521452767e4;\nvar n6 = 0.14915108613530e2;\nvar n2 = -0.72421316703206e6;\nvar n7 = -0.48232657361591e4;\nvar n3 = -0.17073846940092e2;\nvar n8 = 0.40511340542057e6;\nvar n4 = 0.12020824702470e5;\nvar n9 = -0.23855557567849;\nvar n5 = -0.32325550322333e7;\nvar n10 = 0.65017534844798e3;\n\nfunction pvsWater(T) {\n  var th = T+n9/(T-n10);\n  var A = (th+n1)*th+n2;\n  var B = (n3*th+n4)*th+n5;\n  var C = (n6*th+n7)*th+n8;\n\n  var p = 2*C/(-B+Math.sqrt(B*B-4*A*C));\n  p *= p;\n  p *= p;\n  return p*1e6;\n}\n\n/**\n * Compute Saturation Vapor Pressure for minT<T[Deg.K]<maxT.\n */\nfunction PVS(T) {\n  if (T<minT || T>maxT) return NaN;\n  else if (T<C_OFFSET)\n    return pvsIce(T);\n  else\n    return pvsWater(T);\n}\n\n/**\n * Compute dewPoint for given relative humidity RH[%] and temperature T[Deg.K].\n */\nfunction dewPoint(RH,T) {\n  return solve(PVS, RH/100*PVS(T), T);\n}\n\n/**\n * Newton's Method to solve f(x)=y for x with an initial guess of x0.\n */\nfunction solve(f,y,x0) {\n  var x = x0;\n  var maxCount = 10;\n  var count = 0;\n  do {\n    var xNew;\n    var dx = x/1000; \n    var z=f(x);\n    xNew = x + dx*(y-z)/(f(x+dx)-z);\n    if (Math.abs((xNew-x)/xNew)<0.0001) \n      return xNew;\n    else if (count>maxCount) {\n      var xnew=NaN; \n      throw new Error(\"Solver does not converge.\");\n      break; \n    }\n    x = xNew;\n    count ++;\n  } while (true);\n}\n\nfunction truncate(x, precision, mode) {\n  if (x==0)\n    return 0;\n  var magnitude;\n  if (mode==RELATIVE)\n    magnitude = Math.round(Math.log(Math.abs(x))/Math.LN10);\n  else\n    magnitude = 0;\n  var scale = Math.pow(10,precision-magnitude);\n  return Math.round(x*scale)/scale;\n}\n\nfunction stringToFloat(s) {\n  if (s.search(/^\\s*(\\+|\\-)?\\d*(\\.\\d*)?\\s*$/)==-1)\n    throw new Error(\"'\"+s+\"' is not a valid number\" + \"'\"+s+\"' is not a valid number\");\n  return parseFloat(s);\n}\n\n// Now back into my code\nvar report = msg.payload\n\nfor (var space_name in report) {\n    if (Object.prototype.hasOwnProperty.call(report, space_name)) {\n        var space = report[space_name]\n        \n        var temp_in_kelvins = ((space.temperature-32)/F_C)+C_OFFSET\n        \n        try {\n          var dew_point = ((dewPoint(space.humidity,temp_in_kelvins)-C_OFFSET)*F_C)+32\n    \n          report[space_name][\"dew point\"] = Math.round(dew_point)\n        } catch (e) {}\n    }\n}\n\n// Build msg for logging\nmsg.payload = report;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2000,
        "wires": [
            [
                "13cdd239fd5c641c"
            ]
        ]
    },
    {
        "id": "4d52600e1ec8c9ea",
        "type": "get-shared-state",
        "z": "6a064f420a191bf8",
        "state": "3d96ef25996d1dd1",
        "name": "Reset",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 70,
        "y": 620,
        "wires": [
            [
                "23755656ed766d1e",
                "3d5f80903bf0d5a5"
            ]
        ]
    },
    {
        "id": "c2f98e5cab73fa1d",
        "type": "comment",
        "z": "6a064f420a191bf8",
        "name": "Reset with trigger",
        "info": "",
        "x": 100,
        "y": 580,
        "wires": []
    },
    {
        "id": "3d5f80903bf0d5a5",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 340,
        "wires": [
            [
                "2d3889f3b872a383"
            ]
        ]
    },
    {
        "id": "13cdd239fd5c641c",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Add Heat Index",
        "func": "// From https://github.com/iwanaga/heat-index/blob/master/index.js\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Yoshihiro Iwanaga\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvar HI = {\n    // utility functions\n    toFahrenheit: function (celsius) {\n        return (9 * celsius / 5 + 32);\n    },\n    toCelsius: function (fehrenheit) {\n        return (5 * (fehrenheit - 32) / 9);\n    },\n    getType: function (input) {\n        return ({}.toString.call(input).slice(8, -1));\n    },\n\n    // definition http://www.hpc.ncep.noaa.gov/html/heatindex_equation.shtml\n    // input = {\n    //     temperature: Number,  required\n    //     humidity   : Number,  required\n    //     fahrenheit : Boolean, optional\n    // }\n    heatIndex: function (input) {\n        if (arguments.length === 0) {\n            throw new Error(\"Invalid Argument. Need at least one.\");\n        }\n        if (HI.getType(input) !== 'Object') {\n            throw new TypeError(\"Invalid Argument. Expecting 'Object'\");\n        }\n        if (HI.getType(input.temperature) !== 'Number' ||\n            HI.getType(input.humidity) !== 'Number') {\n            throw new TypeError(\"Invalid Argument. temperature and humidity must be 'Number'\");\n        }\n\n        var t = HI.toFahrenheit(input.temperature) || 0,\n            h = input.humidity || 0;\n\n        if (input.fahrenheit) {\n            t = input.temperature;\n        }\n\n        // Steadman's result\n        var heatIndex = 0.5 * (t + 61 + (t - 68) * 1.2 + h * 0.094);\n\n        // regression equation of Rothfusz is appropriate\n        if (t >= 80) {\n            var heatIndexBase = (-42.379                      +\n                                   2.04901523 * t             +\n                                  10.14333127         * h     +\n                                  -0.22475541 * t     * h     +\n                                  -0.00683783 * t * t         +\n                                  -0.05481717         * h * h +\n                                   0.00122874 * t * t * h     +\n                                   0.00085282 * t     * h * h +\n                                  -0.00000199 * t * t * h * h);\n            // adjustment\n            if (h < 13 && t <= 112) {\n                heatIndex = heatIndexBase - (13 - h) / 4 * Math.sqrt((17 - Math.abs(t - 95)) / 17);\n            } else if (h > 85 && t <= 87) {\n                heatIndex = heatIndexBase + ((h - 85) / 10) * ((87 - t) / 5)\n            } else {\n                heatIndex = heatIndexBase;\n            }\n        }\n        return (input.fahrenheit ? heatIndex : HI.toCelsius(heatIndex));\n    }\n};\n\n// Now back into my code\nvar report = msg.payload\n\nfor (var space_name in report) {\n    if (Object.prototype.hasOwnProperty.call(report, space_name)) {\n        var space = report[space_name]\n        \n        var object = {temperature: space.temperature, humidity: space.humidity, fahrenheit: true}\n\n        try {\n            var heat_index = HI.heatIndex(object)\n    \n            report[space_name][\"heat index\"] = Math.round(heat_index)\n        } catch (e) {}\n    }\n}\n\nmsg.payload = report\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2000,
        "wires": [
            [
                "9c17512707c3eacc"
            ]
        ]
    },
    {
        "id": "02049bc0fd4e568d",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Prep for logging",
        "func": "report = msg.payload\n\n// Build msg for logging\nmsg.payload = {};\nmsg.payload.object = report\nmsg.payload.type = \"object\"\nmsg.payload.object_string = JSON.stringify(msg.payload.object);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2000,
        "wires": [
            [
                "67c5137b0466f356"
            ]
        ]
    },
    {
        "id": "dc9b616a983b60a1",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "b7959b8b695cb2e3",
        "name": "Current Climate",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 960,
        "y": 2060,
        "wires": []
    },
    {
        "id": "d15e2659196fc1ca",
        "type": "inject",
        "z": "6a064f420a191bf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1460,
        "y": 320,
        "wires": [
            [
                "9487045d442fbd6a"
            ]
        ]
    },
    {
        "id": "9c17512707c3eacc",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "Set fan speeds",
        "func": "var currentAirCondition = msg.payload\n\nfunction determineFanSpeedByHeatIndex(airConditionData) {\n  // Totally arbitrary formula reflecting our comfort.\n  var rawFanSpeed = Math.sqrt((airConditionData[\"heat index\"] - 67) * 4)\n  if (isNaN(rawFanSpeed)) {\n    rawFanSpeed = 2\n  }\n  node.debug(\"Heat index indicates a fan speed of \" + rawFanSpeed)\n  var actualFanSpeed = Math.max(2, rawFanSpeed) // Min fan speed of 2 when we're here\n  var actualFanSpeed = Math.min(10, actualFanSpeed) // Max possible fan speed of 10\n  node.debug(\"Capped to \" + actualFanSpeed)\n  var fanSpeedAsPercentage = Math.round(actualFanSpeed) * 10\n  airConditionData[\"considered fan speeds\"][\"heat index\"] = fanSpeedAsPercentage\n}\n\nfunction determineFanSpeedByFormaldehyde(airConditionData) {\n  // I have no idea how to interpret the Formaldehyde/HCHO data right now\n  var rawFanSpeed = 2\n  if (isNaN(rawFanSpeed)) {\n    rawFanSpeed = 2\n  }\n  node.debug(\"Formaldehyde indicates a fan speed of \" + rawFanSpeed)\n  var actualFanSpeed = Math.max(2, rawFanSpeed) // Min fan speed of 2 when we're here\n  var actualFanSpeed = Math.min(10, actualFanSpeed) // Max possible fan speed of 10\n  node.debug(\"Capped to \" + actualFanSpeed)\n  var fanSpeedAsPercentage = Math.round(actualFanSpeed) * 10\n  airConditionData[\"considered fan speeds\"][\"formaldehyde\"] = fanSpeedAsPercentage\n}\n\nfunction determineFanSpeedByPM25(airConditionData) {\n  // Using guidance found in Dyson app\n  var rawFanSpeed = airConditionData[\"pm2.5\"]/10\n  if (isNaN(rawFanSpeed)) {\n    rawFanSpeed = 2\n  }\n  node.debug(\"pm2.5 indicates a fan speed of \" + rawFanSpeed)\n  var actualFanSpeed = Math.max(2, rawFanSpeed) // Min fan speed of 2 when we're here\n  var actualFanSpeed = Math.min(10, actualFanSpeed) // Max possible fan speed of 10\n  node.debug(\"Capped to \" + actualFanSpeed)\n  var fanSpeedAsPercentage = Math.round(actualFanSpeed) * 10\n  airConditionData[\"considered fan speeds\"][\"pm2.5\"] = fanSpeedAsPercentage\n}\n\nfunction determineFanSpeedByVOC(airConditionData) {\n  // Using guidance found in Dyson app\n  var rawFanSpeed = airConditionData[\"voc\"]/2\n  if (isNaN(rawFanSpeed)) {\n    rawFanSpeed = 2\n  }\n  node.debug(\"VOC indicates a fan speed of \" + rawFanSpeed)\n  var actualFanSpeed = Math.max(2, rawFanSpeed) // Min fan speed of 2 when we're here\n  var actualFanSpeed = Math.min(10, actualFanSpeed) // Max possible fan speed of 10\n  node.debug(\"Capped to \" + actualFanSpeed)\n  var fanSpeedAsPercentage = Math.round(actualFanSpeed) * 10\n  airConditionData[\"considered fan speeds\"][\"voc\"] = fanSpeedAsPercentage\n}\n\nfunction determineFanSpeedByPollutants(airConditionData) {\n  determineFanSpeedByFormaldehyde(airConditionData)\n  determineFanSpeedByPM25(airConditionData)\n  determineFanSpeedByVOC(airConditionData)\n}\n\nfunction determineFanSpeedByHumidifier(airConditionData) {\n  if (airConditionData.hasOwnProperty(\"humidity control\")) {\n    \n    var desired_humidity = airConditionData[\"humidity control\"][\"desired humidity\"]\n    var current_humidity = airConditionData[\"humidity\"]\n\n    var rawFanSpeed = 2\n\n    if (airConditionData[\"humidity control\"][\"humidifier on\"]) {\n      rawFanSpeed = desired_humidity - current_humidity\n      node.debug(\"Humidifier indicates a fan speed of \" + rawFanSpeed)\n    }\n\n    if (isNaN(rawFanSpeed)) {\n      rawFanSpeed = 2\n    }\n    var actualFanSpeed = Math.max(2, rawFanSpeed) // Min fan speed of 2 when we're here\n    var actualFanSpeed = Math.min(10, actualFanSpeed) // Max possible fan speed of 10\n    node.debug(\"Capped to \" + actualFanSpeed)\n    var fanSpeedAsPercentage = Math.round(actualFanSpeed) * 10\n    airConditionData[\"considered fan speeds\"][\"humidifier\"] = fanSpeedAsPercentage\n  }\n}\n\nfunction determineFanSpeed(airConditionData) {\n  airConditionData[\"considered fan speeds\"] = {}\n\n  determineFanSpeedByHeatIndex(airConditionData)\n  determineFanSpeedByPollutants(airConditionData)\n  determineFanSpeedByHumidifier(airConditionData)\n\n  var actualFanSpeed = Math.max(...Object.values(airConditionData[\"considered fan speeds\"]))\n\n  node.debug(\"Decided on fan speed of \" + actualFanSpeed + \"%\")\n\n  airConditionData[\"fan speed\"] = actualFanSpeed\n}\n\n// Handle Master Bedroom\nconsole.debug(\"Determining fan speed for Master Bedroom\")\ndetermineFanSpeed(currentAirCondition[\"Master Bedroom\"])\nconsole.debug(\"Determined fan speed for Master Bedroom\")\n\n// Handle Guest Suite\nconsole.debug(\"Determining fan speed for Guest Bedroom\")\ndetermineFanSpeed(currentAirCondition[\"Bedroom\"])\nconsole.debug(\"Determined fan speed for Guest Bedroom\")\n\n// Handle Living Room\nconsole.debug(\"Determining fan speed for Living Room\")\ndetermineFanSpeed(currentAirCondition[\"Living Room Center\"])\nconsole.debug(\"Determined fan speed for Living Room\")\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2000,
        "wires": [
            [
                "02049bc0fd4e568d",
                "dc9b616a983b60a1"
            ]
        ]
    },
    {
        "id": "8677bb871d025c89",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "b460a2f7c87f3795"
            ]
        ]
    },
    {
        "id": "0e7095f3697a1233",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "8292bb8f30d17629"
            ]
        ]
    },
    {
        "id": "e1c842ce5903a98e",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1840,
        "y": 360,
        "wires": [
            [
                "adc754d173d18011"
            ]
        ]
    },
    {
        "id": "a8b85510e85625a1",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1920,
        "wires": [
            [
                "060721ad1fe1ae05"
            ]
        ]
    },
    {
        "id": "bfa871a51e5fcda5",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "ab453badbf5fe4c4",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5408786353832f",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "02d6a5ffc6a61428",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "4c3fe0d182e4971a",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3f54fe9bf1991c13",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "cb5da233c70e8d14",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "9a95fda7ae0b2941",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "69850a93d4111cd9",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "5a3f8f7803751084",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b0e83735d42234",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 500,
        "wires": [
            [
                "d6780dc3d1f346a0"
            ]
        ]
    },
    {
        "id": "86f2aa4cdf686bb5",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 580,
        "wires": [
            [
                "81b04d253cd97b0f"
            ]
        ]
    },
    {
        "id": "7ffee5f7acf9af9b",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.master_bedroom_formaldehyde",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "3e1fc385282966a6"
            ]
        ]
    },
    {
        "id": "f28501062c777ad7",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_formaldehyde",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 580,
        "y": 1260,
        "wires": [
            [
                "c4a0909de07e449e"
            ]
        ]
    },
    {
        "id": "3e1fc385282966a6",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "095dfa84b601e73c",
        "name": "Formaldehyde of Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1300,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c4a0909de07e449e",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "f3f728cd1ad260ac",
        "name": "Formaldehyde of Living Room",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1290,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c8bb14cd9b95165b",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "6560ed9571c25928",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "a41f064362f6ce7e",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "bca77a051ed012e8",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "d61d5bff04d746e1",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.bedroom_formaldehyde",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 580,
        "y": 1320,
        "wires": [
            [
                "7afa26e69555becd"
            ]
        ]
    },
    {
        "id": "7afa26e69555becd",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "2cd1bb9b8154af43",
        "name": "Formaldehyde of Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1280,
        "y": 1320,
        "wires": []
    },
    {
        "id": "093094ae923ac228",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac039cc121b7593",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "d3e0129b23e14e9f",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.master_bedroom_pm_2_5",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 580,
        "y": 1380,
        "wires": [
            [
                "32e149a8f27e2be9"
            ]
        ]
    },
    {
        "id": "e893b9f94b0f699d",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_pm_2_5",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 1440,
        "wires": [
            [
                "3144f7e419e7d3f9"
            ]
        ]
    },
    {
        "id": "32e149a8f27e2be9",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "3d210964719a1218",
        "name": "PM 2.5 of Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1280,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3144f7e419e7d3f9",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "ab6403409b952999",
        "name": "PM 2.5 of Living Room",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1e836f4c05fd7c94",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "1a083542ce826fb5",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "68ac5f5c8ce26f54",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "106301f8e0279a16",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "3aefd97b68bfe547",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.bedroom_pm_2_5",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 1500,
        "wires": [
            [
                "7e30f9fea98f056c"
            ]
        ]
    },
    {
        "id": "7e30f9fea98f056c",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "3d29dd9baea8c557",
        "name": "PM 2.5 of Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1250,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9e06959aea976901",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "8b0c0501d5e5b562",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "9c377bc17a4aa03a",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 720,
        "wires": [
            [
                "156f16e0c85e2816"
            ]
        ]
    },
    {
        "id": "414b598fd90ee4de",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 780,
        "wires": [
            [
                "75cb9283e2cb7aba"
            ]
        ]
    },
    {
        "id": "9a39ae1dd8b22980",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 840,
        "wires": [
            [
                "2ec3a969aa01e5c2"
            ]
        ]
    },
    {
        "id": "9fe8377df9dba651",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 900,
        "wires": [
            [
                "b3fd89c4de936d7c"
            ]
        ]
    },
    {
        "id": "d0a15d3cd2962152",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 960,
        "wires": [
            [
                "589452f0e043686c"
            ]
        ]
    },
    {
        "id": "ccf4342cd237b4fe",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "19c242d2027aedf7"
            ]
        ]
    },
    {
        "id": "1e71b32d69eb7fe6",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1080,
        "wires": [
            [
                "59ac828528febe57"
            ]
        ]
    },
    {
        "id": "bbaee6b986a4ee5a",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1140,
        "wires": [
            [
                "921d40799aa20523"
            ]
        ]
    },
    {
        "id": "74a55f2e663011fe",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1200,
        "wires": [
            [
                "7ffee5f7acf9af9b"
            ]
        ]
    },
    {
        "id": "92d666b35803f2de",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "9",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "f28501062c777ad7"
            ]
        ]
    },
    {
        "id": "061b203d058d17ea",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1320,
        "wires": [
            [
                "d61d5bff04d746e1"
            ]
        ]
    },
    {
        "id": "0f7dfc87e814fb16",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "11",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1380,
        "wires": [
            [
                "d3e0129b23e14e9f"
            ]
        ]
    },
    {
        "id": "2c533a8589d2fa9c",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "12",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1440,
        "wires": [
            [
                "e893b9f94b0f699d"
            ]
        ]
    },
    {
        "id": "642e635566504ed6",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "13",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1500,
        "wires": [
            [
                "3aefd97b68bfe547"
            ]
        ]
    },
    {
        "id": "8938a2be3cfaf03a",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "17",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1740,
        "wires": [
            [
                "c8d0a2af88c5d967"
            ]
        ]
    },
    {
        "id": "2dafe3bdd3ee5d2b",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "18",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "b801117a19b49b89"
            ]
        ]
    },
    {
        "id": "1c851c9f09fd0503",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.master_bedroom_volatile_organic_compounds_index",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 670,
        "y": 1560,
        "wires": [
            [
                "5a841ddb075218a8"
            ]
        ]
    },
    {
        "id": "4f0b977c2fde14e1",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.living_room_volatile_organic_compounds_index_2",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 660,
        "y": 1620,
        "wires": [
            [
                "0cbc898664c54128"
            ]
        ]
    },
    {
        "id": "5a841ddb075218a8",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "93cb5e076b9a47ab",
        "name": "VOC of Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1270,
        "y": 1560,
        "wires": []
    },
    {
        "id": "0cbc898664c54128",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "b726d533a34a65b2",
        "name": "VOC of Living Room",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1260,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9e574a872484ed4a",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "2c03fdf99e842e38",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "f514400be19c3095",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "d1f1bd2d138b9cd8",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "056dda3c4db6abca",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.bedroom_volatile_organic_compounds_index",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 640,
        "y": 1680,
        "wires": [
            [
                "63bf96924cf78021"
            ]
        ]
    },
    {
        "id": "63bf96924cf78021",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "498e0ff9684c787f",
        "name": "VOC of Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1250,
        "y": 1680,
        "wires": []
    },
    {
        "id": "8c04c1a601a7abfc",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "22b1c79684e98c7a",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "cfc5a331173089fe",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "14",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1560,
        "wires": [
            [
                "1c851c9f09fd0503"
            ]
        ]
    },
    {
        "id": "f0c952769f734465",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1620,
        "wires": [
            [
                "4f0b977c2fde14e1"
            ]
        ]
    },
    {
        "id": "36a677075665f73f",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "16",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1680,
        "wires": [
            [
                "056dda3c4db6abca"
            ]
        ]
    },
    {
        "id": "688e589a15e4d223",
        "type": "api-current-state",
        "z": "6a064f420a191bf8",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "humidifier.master_bedroom",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "$entity().attributes.humidity",
                "valueType": "jsonata"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 1860,
        "wires": [
            [
                "c9b6b7f3cd472fbf"
            ]
        ]
    },
    {
        "id": "b8d5bf8bdd10fc97",
        "type": "set-shared-state",
        "z": "6a064f420a191bf8",
        "state": "6786c1f320a58042",
        "name": "Desired Humidity Master Bedroom",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1300,
        "y": 1860,
        "wires": []
    },
    {
        "id": "c9b6b7f3cd472fbf",
        "type": "switch",
        "z": "6a064f420a191bf8",
        "name": "If it's a number",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 896,
        "y": 1859,
        "wires": [
            [
                "b8d5bf8bdd10fc97"
            ]
        ]
    },
    {
        "id": "cb70bfcf49dbde98",
        "type": "function",
        "z": "6a064f420a191bf8",
        "name": "reject if NaN",
        "func": "if (isNaN(msg.payload)) {\n    return null\n}\n\nif (msg.payload == \"NaN\") {\n    return null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "09360934291defa6",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "delay",
        "timeout": "19",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "60",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1860,
        "wires": [
            [
                "688e589a15e4d223"
            ]
        ]
    },
    {
        "id": "060721ad1fe1ae05",
        "type": "delay",
        "z": "6a064f420a191bf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 1920,
        "wires": [
            [
                "5c5b49d9b27da7ce"
            ]
        ]
    },
    {
        "id": "44cda3a058c5f5cc",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "name": "Is Caroline Home?",
        "func": "if (global.get(\"state\").isCarolineHome.value) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 60,
        "wires": [
            [
                "07129761ac46de86"
            ]
        ]
    },
    {
        "id": "c847b6e97b66948b",
        "type": "get-shared-state",
        "z": "0d2150a703bedcd6",
        "state": "e3cb7570.0dbb48",
        "name": "Nick Home",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 100,
        "y": 60,
        "wires": [
            [
                "9d7681a097b04acc"
            ]
        ]
    },
    {
        "id": "9d7681a097b04acc",
        "type": "switch",
        "z": "0d2150a703bedcd6",
        "name": "Is Nick no longer home?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 60,
        "wires": [
            [
                "4d866f7c2e888ea3"
            ]
        ]
    },
    {
        "id": "652153416240f8b4",
        "type": "delay",
        "z": "0d2150a703bedcd6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "day",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "7cb519ff000e094a"
            ]
        ]
    },
    {
        "id": "4d866f7c2e888ea3",
        "type": "delay",
        "z": "0d2150a703bedcd6",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "44cda3a058c5f5cc"
            ]
        ]
    },
    {
        "id": "76ee9a333fd011df",
        "type": "ttsultimate",
        "z": "0d2150a703bedcd6",
        "name": "",
        "voice": "en-US",
        "ssml": false,
        "sonosipaddress": "10.212.100.226",
        "sonosvolume": "30",
        "sonoshailing": "Hailing_ComputerCall.mp3",
        "config": "89337ebbba16965d",
        "property": "payload",
        "propertyType": {},
        "rules": [],
        "playertype": "sonos",
        "speakingrate": "1",
        "speakingpitch": "0",
        "unmuteIfMuted": true,
        "x": 570,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a58f3514bc59d688",
        "type": "link call",
        "z": "0d2150a703bedcd6",
        "name": "Reset Music",
        "links": [
            "b1f2b5145a191585"
        ],
        "timeout": "30",
        "x": 750,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1b58fbbef7b0455c",
        "type": "catch",
        "z": "0d2150a703bedcd6",
        "name": "Catch TTS Error",
        "scope": [
            "76ee9a333fd011df"
        ],
        "uncaught": false,
        "x": 580,
        "y": 180,
        "wires": [
            [
                "a58f3514bc59d688"
            ]
        ]
    },
    {
        "id": "7cb519ff000e094a",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "d": true,
        "name": "Generate Notification Message",
        "func": "notification_message = \"Caroline, have you selected an EMDR pratctitioner?\"\n\nmsg.payload = notification_message\n\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "76ee9a333fd011df"
            ]
        ]
    },
    {
        "id": "07129761ac46de86",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "name": "Stop if anyone asleep",
        "func": "if (global.get(\"state\").isAnyoneAsleep.value) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 60,
        "wires": [
            [
                "652153416240f8b4"
            ]
        ]
    },
    {
        "id": "ade63541efa85ad9",
        "type": "comment",
        "z": "0d2150a703bedcd6",
        "name": "Remind us to close windows if it will rain",
        "info": "",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "aa9b0e9f0b29a182",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "name": "To check or not to check?",
        "func": "var musicPlaybackType = global.get(\"state\").musicPlaybackType.value\n\n// If it's winddown or sleep definitely notify\nif (musicPlaybackType == \"winddown\" ||\n    musicPlaybackType == \"sleep\"\n    ) {\n    return msg\n}\n\n// Otherwise ignore",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "21bdd26ad7a80f0f"
            ],
            []
        ]
    },
    {
        "id": "843e63ed650ed48e",
        "type": "get-shared-state",
        "z": "0d2150a703bedcd6",
        "state": "8c211e55da1f4c7f",
        "name": "Music Playback Type",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 140,
        "y": 320,
        "wires": [
            [
                "aa9b0e9f0b29a182"
            ]
        ]
    },
    {
        "id": "95611df7270d871b",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "name": "Check forecast",
        "func": "var forecastData = msg.payload.forecast\n\nconsole.debug(\"Based on forecast data of:\")\nconsole.debug(forecastData)\n\nconst riskOfRain = forecastData.slice(0, 10).some(item => item.precipitation > 0.25);\n\nif (riskOfRain) {\n    console.debug(\"Concluded there is a risk of rain in the next 10 hours\")\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "e9898046b0d46645"
            ]
        ]
    },
    {
        "id": "16a9d498b030b3a6",
        "type": "inject",
        "z": "0d2150a703bedcd6",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "21bdd26ad7a80f0f"
            ]
        ]
    },
    {
        "id": "21bdd26ad7a80f0f",
        "type": "api-call-service",
        "z": "0d2150a703bedcd6",
        "name": "Get forecast",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "weather",
        "service": "get_forecast",
        "areaId": [],
        "deviceId": [
            "9d0992a8b17d4545aeb007e2274f3d1e"
        ],
        "entityId": [],
        "data": "{\"type\": \"hourly\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "queue": "none",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "95611df7270d871b"
            ]
        ]
    },
    {
        "id": "040a0d2d8452c13e",
        "type": "catch",
        "z": "0d2150a703bedcd6",
        "name": "Catch TTS Error",
        "scope": [
            "b8b874928838b516"
        ],
        "uncaught": false,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "4e898657536fbb37"
            ]
        ]
    },
    {
        "id": "4e898657536fbb37",
        "type": "link call",
        "z": "0d2150a703bedcd6",
        "name": "Reset Music",
        "links": [
            "b1f2b5145a191585"
        ],
        "timeout": "30",
        "x": 770,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b874928838b516",
        "type": "ttsultimate",
        "z": "0d2150a703bedcd6",
        "name": "",
        "voice": "en-US",
        "ssml": false,
        "sonosipaddress": "10.212.100.226",
        "sonosvolume": "30",
        "sonoshailing": "0",
        "config": "89337ebbba16965d",
        "property": "payload",
        "propertyType": {},
        "rules": [],
        "playertype": "sonos",
        "speakingrate": "1",
        "speakingpitch": "0",
        "unmuteIfMuted": true,
        "x": 590,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8cbb9fc23a88c3c0",
        "type": "function",
        "z": "0d2150a703bedcd6",
        "name": "Generate Notification Message",
        "func": "var notification_message = \"It may rain tonight, better close the windows\"\n\nmsg.payload = notification_message\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "b8b874928838b516"
            ]
        ]
    },
    {
        "id": "e9898046b0d46645",
        "type": "delay",
        "z": "0d2150a703bedcd6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "12",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "8cbb9fc23a88c3c0"
            ]
        ]
    },
    {
        "id": "0266ff67bd766f59",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Turn on Apple TV",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "{\"command\": \"home\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "fa7a5706b010cfbf"
            ]
        ]
    },
    {
        "id": "8ba57550455da33b",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Go to home",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "{\"command\": \"home\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "b0e02bbb3b81d398"
            ]
        ]
    },
    {
        "id": "fa7a5706b010cfbf",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 80,
        "wires": [
            [
                "8ba57550455da33b"
            ]
        ]
    },
    {
        "id": "b0e02bbb3b81d398",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1160,
        "y": 80,
        "wires": [
            [
                "59cbc6c8714c7cbf"
            ]
        ]
    },
    {
        "id": "59cbc6c8714c7cbf",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Go to menu",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "{\"command\": \"menu\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1310,
        "y": 80,
        "wires": [
            [
                "861a5f615a271150"
            ]
        ]
    },
    {
        "id": "861a5f615a271150",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "db8d99433da734d1"
            ]
        ]
    },
    {
        "id": "db8d99433da734d1",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Go to menu",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "{\"command\": \"menu\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "b77fe937eefb09b3"
            ]
        ]
    },
    {
        "id": "b77fe937eefb09b3",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "0bc283719f5d6959"
            ]
        ]
    },
    {
        "id": "0bc283719f5d6959",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Go to menu",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [],
        "deviceId": [
            "4cb91db5c368ef79e9cd2fafb2e9ac3c"
        ],
        "entityId": [
            "remote.big_beautiful_oled"
        ],
        "data": "{\"command\": \"menu\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1310,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "75725d895eb025ac",
        "type": "function",
        "z": "164999f348401406",
        "name": "If TV not playing",
        "func": "var isTVPlaying = global.get(\"state\").isTVPlaying.value\n\nif (isTVPlaying == false) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "5570d8ac9cfc7879"
            ]
        ]
    },
    {
        "id": "b4bae27b40c93f10",
        "type": "comment",
        "z": "164999f348401406",
        "name": "Turn on TV and screensaver",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "9d79d6cd3f994b75",
        "type": "link in",
        "z": "164999f348401406",
        "name": "Turn on Apple TV Screensaver",
        "links": [
            "b47a5d8324f29a71"
        ],
        "x": 145,
        "y": 80,
        "wires": [
            [
                "75725d895eb025ac"
            ]
        ]
    },
    {
        "id": "f5f45b38a2831134",
        "type": "inject",
        "z": "164999f348401406",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "75725d895eb025ac"
            ]
        ]
    },
    {
        "id": "cf4660e2535faee1",
        "type": "comment",
        "z": "164999f348401406",
        "name": "Monitor for whether TV is playing",
        "info": "",
        "x": 170,
        "y": 240,
        "wires": []
    },
    {
        "id": "22a942ce5b9137fe",
        "type": "server-state-changed",
        "z": "164999f348401406",
        "name": "Sense if Apple TV is playing",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "media_player.big_beautiful_oled",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "playing",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "f6e3848f50908c06"
            ],
            []
        ]
    },
    {
        "id": "51c32d5740a1645d",
        "type": "server-state-changed",
        "z": "164999f348401406",
        "name": "Sense if Apple TV is not playing",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "media_player.big_beautiful_oled",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "playing",
        "ifStateType": "str",
        "ifStateOperator": "is_not",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "x": 190,
        "y": 340,
        "wires": [
            [
                "f6e3848f50908c06"
            ],
            []
        ]
    },
    {
        "id": "f6e3848f50908c06",
        "type": "set-shared-state",
        "z": "164999f348401406",
        "state": "e1e1553b9b6a27c9",
        "name": "Is Apple TV Playing?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "274f237edf2f1bd7",
        "type": "comment",
        "z": "164999f348401406",
        "name": "Monitor for whether TV is on",
        "info": "",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "54b3e77834091de8",
        "type": "server-state-changed",
        "z": "164999f348401406",
        "name": "Sense if TV is on",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "remote.sony_xr_65a80k",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "5e0f976532de47d8"
            ],
            []
        ]
    },
    {
        "id": "5e0f976532de47d8",
        "type": "set-shared-state",
        "z": "164999f348401406",
        "state": "9784d6c488d7a77e",
        "name": "Is TV On?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "577710b513289538",
        "type": "server-state-changed",
        "z": "164999f348401406",
        "name": "Sense if TV is off",
        "server": "3ec50562615a9f50",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "remote.sony_xr_65a80k",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "5e0f976532de47d8"
            ],
            []
        ]
    },
    {
        "id": "304eb5d8976b8c42",
        "type": "comment",
        "z": "164999f348401406",
        "name": "Force TV to use soundbar b/c TV is dumb and picks the wrong one every time",
        "info": "",
        "x": 790,
        "y": 740,
        "wires": []
    },
    {
        "id": "cde489975cb390df",
        "type": "api-current-state",
        "z": "164999f348401406",
        "name": "",
        "server": "3ec50562615a9f50",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "media_player.sony_xr_65a80k",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "$entity().attributes.media_content_id",
                "valueType": "jsonata"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "seconds",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "aa51ad0395e3d10c"
            ],
            []
        ]
    },
    {
        "id": "fc52884908f8d65e",
        "type": "inject",
        "z": "164999f348401406",
        "name": "Constantly re-check",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "cde489975cb390df"
            ]
        ]
    },
    {
        "id": "aa51ad0395e3d10c",
        "type": "switch",
        "z": "164999f348401406",
        "name": "If Apple TV is selected",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "port=4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 660,
        "wires": [
            [
                "e846ec9142631cad"
            ],
            [
                "5a57e4e428d0e3a5"
            ]
        ]
    },
    {
        "id": "e846ec9142631cad",
        "type": "function",
        "z": "164999f348401406",
        "name": "Is AppleTV Playing?",
        "func": "var isAppleTVPlaying = global.get(\"state\").isAppleTVPlaying.value\n\nmsg.payload = isAppleTVPlaying\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 620,
        "wires": [
            [
                "3a2abf13674ba857"
            ]
        ]
    },
    {
        "id": "3a2abf13674ba857",
        "type": "set-shared-state",
        "z": "164999f348401406",
        "state": "d9abb6b3441e0c2a",
        "name": "Is TV Playing?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1320,
        "y": 640,
        "wires": []
    },
    {
        "id": "5a57e4e428d0e3a5",
        "type": "change",
        "z": "164999f348401406",
        "name": "Not Apple TV, so assume playing",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "3a2abf13674ba857"
            ]
        ]
    },
    {
        "id": "702ba39cf7ca783e",
        "type": "get-shared-state",
        "z": "164999f348401406",
        "state": "9784d6c488d7a77e",
        "name": "Is TV On?",
        "triggerOnInit": true,
        "triggerOnChange": true,
        "x": 680,
        "y": 460,
        "wires": [
            [
                "fa984448bec53a54"
            ]
        ]
    },
    {
        "id": "fa984448bec53a54",
        "type": "switch",
        "z": "164999f348401406",
        "name": "If TV is Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 460,
        "wires": [
            [
                "f505bd0ac65893f2",
                "a1ac6d48e59dc03c"
            ]
        ]
    },
    {
        "id": "f505bd0ac65893f2",
        "type": "set-shared-state",
        "z": "164999f348401406",
        "state": "d9abb6b3441e0c2a",
        "name": "Is TV Playing?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1000,
        "y": 460,
        "wires": []
    },
    {
        "id": "be9313d0ce6bbba5",
        "type": "comment",
        "z": "164999f348401406",
        "name": "If the TV is off it's not playing",
        "info": "",
        "x": 740,
        "y": 420,
        "wires": []
    },
    {
        "id": "c9408fc7ae227079",
        "type": "comment",
        "z": "164999f348401406",
        "name": "Decide if TV is being used",
        "info": "",
        "x": 150,
        "y": 600,
        "wires": []
    },
    {
        "id": "5dbf67f588125af7",
        "type": "get-shared-state",
        "z": "164999f348401406",
        "state": "9784d6c488d7a77e",
        "name": "Is TV On?",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 100,
        "y": 780,
        "wires": [
            [
                "7c0965a153bce37d"
            ]
        ]
    },
    {
        "id": "645726f28db704e6",
        "type": "api-call-service",
        "z": "164999f348401406",
        "name": "Use Soundbar",
        "server": "3ec50562615a9f50",
        "version": 5,
        "debugenabled": false,
        "domain": "remote",
        "service": "send_command",
        "areaId": [
            "living_room"
        ],
        "deviceId": [
            "ef759f6d3bb61617024ceacfc5e14c12"
        ],
        "entityId": [],
        "data": "{\"command\":\"AudioOutput_AudioSystem\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "payload",
                "valueType": "msg"
            }
        ],
        "queue": "none",
        "x": 780,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4b461b04a68e6f6e",
        "type": "catch",
        "z": "164999f348401406",
        "name": "Ignore Soundbar call",
        "scope": [
            "645726f28db704e6"
        ],
        "uncaught": false,
        "x": 970,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "86d4e21e11d6bf10",
        "type": "ha-api",
        "z": "164999f348401406",
        "name": "Restart Apple TV Integration",
        "server": "3ec50562615a9f50",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "post",
        "path": "config/config_entries/entry/78f5ddf87ceabf578245d0843919d429/reload",
        "data": "{}",
        "dataType": "json",
        "responseType": "json",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 1080,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e394e3d7d2d0f765",
        "type": "inject",
        "z": "164999f348401406",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 860,
        "y": 380,
        "wires": [
            [
                "86d4e21e11d6bf10"
            ]
        ]
    },
    {
        "id": "5570d8ac9cfc7879",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "rate",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 80,
        "wires": [
            [
                "0266ff67bd766f59"
            ]
        ]
    },
    {
        "id": "7c0965a153bce37d",
        "type": "function",
        "z": "164999f348401406",
        "name": "If TV is on",
        "func": "var isTVon = global.get(\"state\").isTVon.value\n\nmsg = {\"payload\": \"whatever\"}\nif (isTVon) {\n    // Send message and try to activate soundbar\n    return msg\n} else {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 780,
        "wires": [
            [
                "4055c81fd7da87eb"
            ]
        ]
    },
    {
        "id": "4055c81fd7da87eb",
        "type": "function",
        "z": "164999f348401406",
        "name": "Repeat 3 times",
        "func": "for (let i = 0; i < 3; i++) {\n    node.send(msg)\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 780,
        "wires": [
            [
                "9d85e338bb7616e4",
                "891dcc09a057ebce"
            ]
        ]
    },
    {
        "id": "9d85e338bb7616e4",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 780,
        "wires": [
            [
                "645726f28db704e6"
            ]
        ]
    },
    {
        "id": "a1ac6d48e59dc03c",
        "type": "set-shared-state",
        "z": "164999f348401406",
        "state": "e1e1553b9b6a27c9",
        "name": "Is Apple TV Playing?",
        "triggerOnInit": true,
        "provideOutput": false,
        "outputs": 0,
        "x": 1020,
        "y": 520,
        "wires": []
    },
    {
        "id": "e0af77ac35cce120",
        "type": "function",
        "z": "164999f348401406",
        "name": "If sunset",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"sunset\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 940,
        "wires": [
            [
                "99b9ef0d3f0d81be"
            ]
        ]
    },
    {
        "id": "0a17c0c951958cfd",
        "type": "function",
        "z": "164999f348401406",
        "name": "If dusk",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"dusk\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 980,
        "wires": [
            [
                "3d0c5a13411d2035"
            ]
        ]
    },
    {
        "id": "d709cf9c8ea857ab",
        "type": "function",
        "z": "164999f348401406",
        "name": "If winddown",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"winddown\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1020,
        "wires": [
            [
                "2277fe9e3535e6ed"
            ]
        ]
    },
    {
        "id": "2277fe9e3535e6ed",
        "type": "pythonshell in",
        "z": "164999f348401406",
        "name": "Min TV Brightness",
        "pyfile": "/data/pythonvenv/pybravia/min_brightness.py",
        "virtualenv": "/data/pythonvenv/pybravia/venv",
        "continuous": false,
        "stdInData": false,
        "x": 650,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "3d0c5a13411d2035",
        "type": "pythonshell in",
        "z": "164999f348401406",
        "name": "Mid TV Brightness",
        "pyfile": "/data/pythonvenv/pybravia/mid_brightness.py",
        "virtualenv": "/data/pythonvenv/pybravia/venv",
        "continuous": false,
        "stdInData": false,
        "x": 650,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "c07a12d630fd3111",
        "type": "function",
        "z": "164999f348401406",
        "name": "If morning",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"morning\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 860,
        "wires": [
            [
                "99b9ef0d3f0d81be"
            ]
        ]
    },
    {
        "id": "b6cec15c51ac4565",
        "type": "function",
        "z": "164999f348401406",
        "name": "If day",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"day\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "99b9ef0d3f0d81be"
            ]
        ]
    },
    {
        "id": "99b9ef0d3f0d81be",
        "type": "pythonshell in",
        "z": "164999f348401406",
        "name": "High TV Brightness",
        "pyfile": "/data/pythonvenv/pybravia/max_brightness.py",
        "virtualenv": "/data/pythonvenv/pybravia/venv",
        "continuous": false,
        "stdInData": false,
        "x": 650,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "3a4d427c37935390",
        "type": "function",
        "z": "164999f348401406",
        "name": "If night",
        "func": "var dayPhase = global.get(\"state\").dayPhase.value\n\nif (dayPhase == \"night\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "2277fe9e3535e6ed"
            ]
        ]
    },
    {
        "id": "4d2029fb32a45055",
        "type": "change",
        "z": "164999f348401406",
        "name": "Aggregate",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 960,
        "wires": [
            [
                "c07a12d630fd3111",
                "b6cec15c51ac4565",
                "e0af77ac35cce120",
                "0a17c0c951958cfd",
                "d709cf9c8ea857ab",
                "3a4d427c37935390"
            ]
        ]
    },
    {
        "id": "891dcc09a057ebce",
        "type": "delay",
        "z": "164999f348401406",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 120,
        "y": 880,
        "wires": [
            [
                "4d2029fb32a45055"
            ]
        ]
    },
    {
        "id": "ea865c85a09d3a02",
        "type": "get-shared-state",
        "z": "164999f348401406",
        "state": "efc87f0de00a2d36",
        "name": "Day Phase",
        "triggerOnInit": false,
        "triggerOnChange": true,
        "x": 100,
        "y": 1080,
        "wires": [
            [
                "25f3c6d985873f57"
            ]
        ]
    },
    {
        "id": "25f3c6d985873f57",
        "type": "function",
        "z": "164999f348401406",
        "name": "Repeat 3 times",
        "func": "for (let i = 0; i < 3; i++) {\n    node.send(msg)\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "891dcc09a057ebce"
            ]
        ]
    }
]